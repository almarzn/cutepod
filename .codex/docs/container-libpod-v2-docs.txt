Constants ¶
View Source
const (
	// RestartPolicyNone indicates that no restart policy has been requested
	// by a container.
	RestartPolicyNone = ""
	// RestartPolicyNo is identical in function to RestartPolicyNone.
	RestartPolicyNo = "no"
	// RestartPolicyAlways unconditionally restarts the container.
	RestartPolicyAlways = "always"
	// RestartPolicyOnFailure restarts the container on non-0 exit code,
	// with an optional maximum number of retries.
	RestartPolicyOnFailure = "on-failure"
	// RestartPolicyUnlessStopped unconditionally restarts unless stopped
	// by the user. It is identical to Always except with respect to
	// handling of system restart, which Podman does not yet support.
	RestartPolicyUnlessStopped = "unless-stopped"
)
Valid restart policy types.

View Source
const (
	// MaxHealthCheckNumberLogs is the maximum number of attempts we keep
	// in the healthcheck history file
	MaxHealthCheckNumberLogs int = 5
	// MaxHealthCheckLogLength in characters
	MaxHealthCheckLogLength = 500
)
View Source
const (
	// MountPrivate represents the private mount option.
	MountPrivate = "private"
	// MountRPrivate represents the rprivate mount option.
	MountRPrivate = "rprivate"
	// MountShared represents the shared mount option.
	MountShared = "shared"
	// MountRShared represents the rshared mount option.
	MountRShared = "rshared"
	// MountSlave represents the slave mount option.
	MountSlave = "slave"
	// MountRSlave represents the rslave mount option.
	MountRSlave = "rslave"
)
View Source
const (
	AttachPipeStdin  = 1
	AttachPipeStdout = 2
	AttachPipeStderr = 3
)
Sync with stdpipe_t in conmon.c

View Source
const CgroupfsDefaultCgroupParent = "/libpod_parent"
CgroupfsDefaultCgroupParent is the cgroup parent for CGroupFS in libpod

View Source
const DefaultWaitInterval = 250 * time.Millisecond
DefaultWaitInterval is the default interval between container status checks while waiting.

View Source
const (
	// IDTruncLength is the length of the pod's id that will be used to make the
	// infra container name
	IDTruncLength = 12
)
View Source
const SystemdDefaultCgroupParent = "machine.slice"
SystemdDefaultCgroupParent is the cgroup parent for the systemd cgroup manager in libpod

View Source
const SystemdDefaultRootlessCgroupParent = "user.slice"
SystemdDefaultRootlessCgroupParent is the cgroup parent for the systemd cgroup manager in libpod when running as rootless

Variables ¶
This section is empty.

Functions ¶
func CreatePodStatusResults ¶
func CreatePodStatusResults(ctrStatuses map[string]define.ContainerStatus) (string, error)
func DefaultSeccompPath ¶
func DefaultSeccompPath() (string, error)
DefaultSeccompPath returns the path to the default seccomp.json file if it exists, first it checks OverrideSeccomp and then default. If neither exist function returns ""

func DownloadFromFile ¶
func DownloadFromFile(reader *os.File) (string, error)
DownloadFromFile reads all of the content from the reader and temporarily saves in it $TMPDIR/importxyz, which is deleted after the image is imported

func FuncTimer ¶
func FuncTimer(funcName string)
FuncTimer helps measure the execution time of a function For debug purposes, do not leave in code used like defer FuncTimer("foo")

func GenerateKubeServiceFromV1Pod ¶
func GenerateKubeServiceFromV1Pod(pod *v1.Pod, servicePorts []v1.ServicePort) v1.Service
GenerateKubeServiceFromV1Pod creates a v1 service object from a v1 pod object

func JSONDeepCopy ¶
func JSONDeepCopy(from, to interface{}) error
JSONDeepCopy performs a deep copy by performing a JSON encode/decode of the given structures. From and To should be identically typed structs.

func LabelVolumePath ¶
func LabelVolumePath(path string) error
LabelVolumePath takes a mount path for a volume and gives it an selinux label of either shared or not

func MountExists ¶
func MountExists(specMounts []spec.Mount, dest string) bool
MountExists returns true if dest exists in the list of mounts

func SetXdgDirs ¶
func SetXdgDirs() error
SetXdgDirs ensures the XDG_RUNTIME_DIR env and XDG_CONFIG_HOME variables are set. containers/image uses XDG_RUNTIME_DIR to locate the auth file, XDG_CONFIG_HOME is use for the containers.conf configuration file.

func Unmount ¶
func Unmount(mount string)
Unmount umounts a target directory

func WaitForFile ¶
func WaitForFile(path string, chWait chan error, timeout time.Duration) (bool, error)
WaitForFile waits until a file has been created or the given timeout has occurred

Types ¶
type BoltState ¶
type BoltState struct {
	// contains filtered or unexported fields
}
BoltState is a state implementation backed by a Bolt DB

func (*BoltState) AddContainer ¶
func (s *BoltState) AddContainer(ctr *Container) error
AddContainer adds a container to the state The container being added cannot belong to a pod

func (*BoltState) AddContainerToPod ¶
func (s *BoltState) AddContainerToPod(pod *Pod, ctr *Container) error
AddContainerToPod adds the given container to an existing pod The container will be added to the state and the pod

func (*BoltState) AddExecSession ¶
func (s *BoltState) AddExecSession(ctr *Container, session *ExecSession) error
AddExecSession adds an exec session to the state.

func (*BoltState) AddPod ¶
func (s *BoltState) AddPod(pod *Pod) error
AddPod adds the given pod to the state.

func (*BoltState) AddVolume ¶
func (s *BoltState) AddVolume(volume *Volume) error
AddVolume adds the given volume to the state. It also adds ctrDepID to the sub bucket holding the container dependencies that this volume has

func (*BoltState) AllContainers ¶
func (s *BoltState) AllContainers() ([]*Container, error)
AllContainers retrieves all the containers in the database

func (*BoltState) AllPods ¶
func (s *BoltState) AllPods() ([]*Pod, error)
AllPods returns all pods present in the state

func (*BoltState) AllVolumes ¶
func (s *BoltState) AllVolumes() ([]*Volume, error)
AllVolumes returns all volumes present in the state

func (*BoltState) Close ¶
func (s *BoltState) Close() error
Close closes the state and prevents further use

func (*BoltState) Container ¶
func (s *BoltState) Container(id string) (*Container, error)
Container retrieves a single container from the state by its full ID

func (*BoltState) ContainerInUse ¶
func (s *BoltState) ContainerInUse(ctr *Container) ([]string, error)
ContainerInUse checks if other containers depend on the given container It returns a slice of the IDs of the containers depending on the given container. If the slice is empty, no containers depend on the given container

func (*BoltState) GetContainerConfig ¶
func (s *BoltState) GetContainerConfig(id string) (*ContainerConfig, error)
GetContainerConfig returns a container config from the database by full ID

func (*BoltState) GetContainerExecSessions ¶
func (s *BoltState) GetContainerExecSessions(ctr *Container) ([]string, error)
GetContainerExecSessions retrieves the IDs of all exec sessions running in a container that the database is aware of (IE, were added via AddExecSession).

func (*BoltState) GetDBConfig ¶
func (s *BoltState) GetDBConfig() (*DBConfig, error)
GetDBConfig retrieves runtime configuration fields that were created when the database was first initialized

func (*BoltState) GetExecSession ¶
func (s *BoltState) GetExecSession(id string) (string, error)
GetExecSession returns the ID of the container an exec session is associated with.

func (*BoltState) GetName ¶
added in v2.0.5
func (s *BoltState) GetName(id string) (string, error)
GetName returns the name associated with a given ID. Since IDs are globally unique, it works for both containers and pods. Returns ErrNoSuchCtr if the ID does not exist.

func (*BoltState) HasContainer ¶
func (s *BoltState) HasContainer(id string) (bool, error)
HasContainer checks if a container is present in the state

func (*BoltState) HasPod ¶
func (s *BoltState) HasPod(id string) (bool, error)
HasPod checks if a pod with the given ID exists in the state

func (*BoltState) HasVolume ¶
func (s *BoltState) HasVolume(name string) (bool, error)
HasVolume returns true if the given volume exists in the state, otherwise it returns false

func (*BoltState) LookupContainer ¶
func (s *BoltState) LookupContainer(idOrName string) (*Container, error)
LookupContainer retrieves a container from the state by full or unique partial ID or name

func (*BoltState) LookupContainerID ¶
func (s *BoltState) LookupContainerID(idOrName string) (string, error)
LookupContainerID retrieves a container ID from the state by full or unique partial ID or name

func (*BoltState) LookupPod ¶
func (s *BoltState) LookupPod(idOrName string) (*Pod, error)
LookupPod retrieves a pod from full or unique partial ID or name

func (*BoltState) LookupVolume ¶
func (s *BoltState) LookupVolume(name string) (*Volume, error)
LookupVolume locates a volume from a partial name.

func (*BoltState) Pod ¶
func (s *BoltState) Pod(id string) (*Pod, error)
Pod retrieves a pod given its full ID

func (*BoltState) PodContainers ¶
func (s *BoltState) PodContainers(pod *Pod) ([]*Container, error)
PodContainers returns all the containers present in the given pod

func (*BoltState) PodContainersByID ¶
func (s *BoltState) PodContainersByID(pod *Pod) ([]string, error)
PodContainersByID returns the IDs of all containers present in the given pod

func (*BoltState) PodHasContainer ¶
func (s *BoltState) PodHasContainer(pod *Pod, id string) (bool, error)
PodHasContainer checks if the given pod has a container with the given ID

func (*BoltState) Refresh ¶
func (s *BoltState) Refresh() error
Refresh clears container and pod states after a reboot

func (*BoltState) RemoveContainer ¶
func (s *BoltState) RemoveContainer(ctr *Container) error
RemoveContainer removes a container from the state Only removes containers not in pods - for containers that are a member of a pod, use RemoveContainerFromPod

func (*BoltState) RemoveContainerExecSessions ¶
func (s *BoltState) RemoveContainerExecSessions(ctr *Container) error
RemoveContainerExecSessions removes all exec sessions attached to a given container.

func (*BoltState) RemoveContainerFromPod ¶
func (s *BoltState) RemoveContainerFromPod(pod *Pod, ctr *Container) error
RemoveContainerFromPod removes a container from an existing pod The container will also be removed from the state

func (*BoltState) RemoveExecSession ¶
func (s *BoltState) RemoveExecSession(session *ExecSession) error
RemoveExecSession removes references to the given exec session in the database.

func (*BoltState) RemovePod ¶
func (s *BoltState) RemovePod(pod *Pod) error
RemovePod removes the given pod from the state Only empty pods can be removed

func (*BoltState) RemovePodContainers ¶
func (s *BoltState) RemovePodContainers(pod *Pod) error
RemovePodContainers removes all containers in a pod

func (*BoltState) RemoveVolume ¶
func (s *BoltState) RemoveVolume(volume *Volume) error
RemoveVolume removes the given volume from the state

func (*BoltState) RewriteContainerConfig ¶
func (s *BoltState) RewriteContainerConfig(ctr *Container, newCfg *ContainerConfig) error
RewriteContainerConfig rewrites a container's configuration. WARNING: This function is DANGEROUS. Do not use without reading the full comment on this function in state.go.

func (*BoltState) RewritePodConfig ¶
func (s *BoltState) RewritePodConfig(pod *Pod, newCfg *PodConfig) error
RewritePodConfig rewrites a pod's configuration. WARNING: This function is DANGEROUS. Do not use without reading the full comment on this function in state.go.

func (*BoltState) RewriteVolumeConfig ¶
func (s *BoltState) RewriteVolumeConfig(volume *Volume, newCfg *VolumeConfig) error
RewriteVolumeConfig rewrites a volume's configuration. WARNING: This function is DANGEROUS. Do not use without reading the full comment on this function in state.go.

func (*BoltState) SaveContainer ¶
func (s *BoltState) SaveContainer(ctr *Container) error
SaveContainer saves a container's current state in the database

func (*BoltState) SavePod ¶
func (s *BoltState) SavePod(pod *Pod) error
SavePod saves a pod's state to the database

func (*BoltState) SaveVolume ¶
func (s *BoltState) SaveVolume(volume *Volume) error
SaveVolume saves the volume's state to the database.

func (*BoltState) SetNamespace ¶
func (s *BoltState) SetNamespace(ns string) error
SetNamespace sets the namespace that will be used for container and pod retrieval

func (*BoltState) UpdateContainer ¶
func (s *BoltState) UpdateContainer(ctr *Container) error
UpdateContainer updates a container's state from the database

func (*BoltState) UpdatePod ¶
func (s *BoltState) UpdatePod(pod *Pod) error
UpdatePod updates a pod's state from the database

func (*BoltState) UpdateVolume ¶
func (s *BoltState) UpdateVolume(volume *Volume) error
UpdateVolume updates the volume's state from the database.

func (*BoltState) ValidateDBConfig ¶
func (s *BoltState) ValidateDBConfig(runtime *Runtime) error
ValidateDBConfig validates paths in the given runtime against the database

func (*BoltState) Volume ¶
func (s *BoltState) Volume(name string) (*Volume, error)
Volume retrieves a volume from full name

func (*BoltState) VolumeInUse ¶
func (s *BoltState) VolumeInUse(volume *Volume) ([]string, error)
VolumeInUse checks if any container is using the volume It returns a slice of the IDs of the containers using the given volume. If the slice is empty, no containers use the given volume

type ConmonOCIRuntime ¶
type ConmonOCIRuntime struct {
	// contains filtered or unexported fields
}
ConmonOCIRuntime is an OCI runtime managed by Conmon. TODO: Make all calls to OCI runtime have a timeout.

func (*ConmonOCIRuntime) AttachResize ¶
func (r *ConmonOCIRuntime) AttachResize(ctr *Container, newSize remotecommand.TerminalSize) error
AttachResize resizes the terminal used by the given container.

func (*ConmonOCIRuntime) AttachSocketPath ¶
func (r *ConmonOCIRuntime) AttachSocketPath(ctr *Container) (string, error)
AttachSocketPath is the path to a single container's attach socket.

func (*ConmonOCIRuntime) CheckConmonRunning ¶
func (r *ConmonOCIRuntime) CheckConmonRunning(ctr *Container) (bool, error)
func (*ConmonOCIRuntime) CheckpointContainer ¶
func (r *ConmonOCIRuntime) CheckpointContainer(ctr *Container, options ContainerCheckpointOptions) error
CheckpointContainer checkpoints the given container.

func (*ConmonOCIRuntime) CreateContainer ¶
func (r *ConmonOCIRuntime) CreateContainer(ctr *Container, restoreOptions *ContainerCheckpointOptions) error
CreateContainer creates a container.

func (*ConmonOCIRuntime) DeleteContainer ¶
func (r *ConmonOCIRuntime) DeleteContainer(ctr *Container) error
DeleteContainer deletes a container from the OCI runtime.

func (*ConmonOCIRuntime) ExecAttachResize ¶
func (r *ConmonOCIRuntime) ExecAttachResize(ctr *Container, sessionID string, newSize remotecommand.TerminalSize) error
ExecAttachResize resizes the TTY of the given exec session.

func (*ConmonOCIRuntime) ExecAttachSocketPath ¶
func (r *ConmonOCIRuntime) ExecAttachSocketPath(ctr *Container, sessionID string) (string, error)
ExecAttachSocketPath is the path to a container's exec session attach socket.

func (*ConmonOCIRuntime) ExecContainer ¶
func (r *ConmonOCIRuntime) ExecContainer(c *Container, sessionID string, options *ExecOptions, streams *define.AttachStreams) (int, chan error, error)
ExecContainer executes a command in a running container

func (*ConmonOCIRuntime) ExecContainerCleanup ¶
func (r *ConmonOCIRuntime) ExecContainerCleanup(ctr *Container, sessionID string) error
ExecContainerCleanup cleans up files created when a command is run via ExecContainer. This includes the attach socket for the exec session.

func (*ConmonOCIRuntime) ExecContainerDetached ¶
func (r *ConmonOCIRuntime) ExecContainerDetached(ctr *Container, sessionID string, options *ExecOptions, stdin bool) (int, error)
ExecContainerDetached executes a command in a running container, but does not attach to it.

func (*ConmonOCIRuntime) ExecContainerHTTP ¶
func (r *ConmonOCIRuntime) ExecContainerHTTP(ctr *Container, sessionID string, options *ExecOptions, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, cancel <-chan bool) (int, chan error, error)
ExecContainerHTTP executes a new command in an existing container and forwards its standard streams over an attach

func (*ConmonOCIRuntime) ExecStopContainer ¶
func (r *ConmonOCIRuntime) ExecStopContainer(ctr *Container, sessionID string, timeout uint) error
ExecStopContainer stops a given exec session in a running container.

func (*ConmonOCIRuntime) ExecUpdateStatus ¶
func (r *ConmonOCIRuntime) ExecUpdateStatus(ctr *Container, sessionID string) (bool, error)
ExecUpdateStatus checks if the given exec session is still running.

func (*ConmonOCIRuntime) ExitFilePath ¶
func (r *ConmonOCIRuntime) ExitFilePath(ctr *Container) (string, error)
ExitFilePath is the path to a container's exit file.

func (*ConmonOCIRuntime) HTTPAttach ¶
func (r *ConmonOCIRuntime) HTTPAttach(ctr *Container, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, detachKeys *string, cancel <-chan bool) (deferredErr error)
HTTPAttach performs an attach for the HTTP API. The caller must handle closing the HTTP connection after this returns. The cancel channel is not closed; it is up to the caller to do so after this function returns. If this is a container with a terminal, we will stream raw. If it is not, we will stream with an 8-byte header to multiplex STDOUT and STDERR.

func (*ConmonOCIRuntime) KillContainer ¶
func (r *ConmonOCIRuntime) KillContainer(ctr *Container, signal uint, all bool) error
KillContainer sends the given signal to the given container. If all is set, send to all PIDs in the container. All is only supported if the container created cgroups.

func (*ConmonOCIRuntime) Name ¶
func (r *ConmonOCIRuntime) Name() string
Name returns the name of the runtime being wrapped by Conmon.

func (*ConmonOCIRuntime) Path ¶
func (r *ConmonOCIRuntime) Path() string
Path returns the path of the OCI runtime being wrapped by Conmon.

func (*ConmonOCIRuntime) PauseContainer ¶
func (r *ConmonOCIRuntime) PauseContainer(ctr *Container) error
PauseContainer pauses the given container.

func (*ConmonOCIRuntime) RuntimeInfo ¶
func (r *ConmonOCIRuntime) RuntimeInfo() (*define.ConmonInfo, *define.OCIRuntimeInfo, error)
RuntimeInfo provides information on the runtime.

func (*ConmonOCIRuntime) StartContainer ¶
func (r *ConmonOCIRuntime) StartContainer(ctr *Container) error
StartContainer starts the given container. Sets time the container was started, but does not save it.

func (*ConmonOCIRuntime) StopContainer ¶
func (r *ConmonOCIRuntime) StopContainer(ctr *Container, timeout uint, all bool) error
StopContainer stops a container, first using its given stop signal (or SIGTERM if no signal was specified), then using SIGKILL. Timeout is given in seconds. If timeout is 0, the container will be immediately kill with SIGKILL. Does not set finished time for container, assumes you will run updateStatus after to pull the exit code.

func (*ConmonOCIRuntime) SupportsCheckpoint ¶
func (r *ConmonOCIRuntime) SupportsCheckpoint() bool
SupportsCheckpoint checks if the OCI runtime supports checkpointing containers.

func (*ConmonOCIRuntime) SupportsJSONErrors ¶
func (r *ConmonOCIRuntime) SupportsJSONErrors() bool
SupportsJSONErrors checks if the OCI runtime supports JSON-formatted error messages.

func (*ConmonOCIRuntime) SupportsKVM ¶
func (r *ConmonOCIRuntime) SupportsKVM() bool
SupportsKVM checks if the OCI runtime supports running containers without KVM separation

func (*ConmonOCIRuntime) SupportsNoCgroups ¶
func (r *ConmonOCIRuntime) SupportsNoCgroups() bool
SupportsNoCgroups checks if the OCI runtime supports running containers without cgroups (the --cgroup-manager=disabled flag).

func (*ConmonOCIRuntime) UnpauseContainer ¶
func (r *ConmonOCIRuntime) UnpauseContainer(ctr *Container) error
UnpauseContainer unpauses the given container.

func (*ConmonOCIRuntime) UpdateContainerStatus ¶
func (r *ConmonOCIRuntime) UpdateContainerStatus(ctr *Container) error
UpdateContainerStatus retrieves the current status of the container from the runtime. It updates the container's state but does not save it. If useRuntime is false, we will not directly hit runc to see the container's status, but will instead only check for the existence of the conmon exit file and update state to stopped if it exists.

type Container ¶
type Container struct {
	// contains filtered or unexported fields
}
Container is a single OCI container. All operations on a Container that access state must begin with a call to syncContainer(). There is no guarantee that state exists in a readable state before syncContainer() is run, and even if it does, its contents will be out of date and must be refreshed from the database. Generally, this requirement applies only to top-level functions; helpers can assume that their callers handled this requirement. Generally speaking, if a function takes the container lock and accesses any part of state, it should syncContainer() immediately after locking.

func (*Container) AddArtifact ¶
func (c *Container) AddArtifact(name string, data []byte) error
AddArtifact creates and writes to an artifact file for the container

func (*Container) Attach ¶
func (c *Container) Attach(streams *define.AttachStreams, keys string, resize <-chan remotecommand.TerminalSize) error
Attach attaches to a container. This function returns when the attach finishes. It does not hold the lock for the duration of its runtime, only using it at the beginning to verify state.

func (*Container) AttachResize ¶
func (c *Container) AttachResize(newSize remotecommand.TerminalSize) error
AttachResize resizes the container's terminal, which is displayed by Attach and HTTPAttach.

func (*Container) AttachSocketPath ¶
func (c *Container) AttachSocketPath() (string, error)
AttachSocketPath retrieves the path of the container's attach socket

func (*Container) AutoRemove ¶
func (c *Container) AutoRemove() bool
AutoRemove indicates whether the container will be removed after it is executed

func (*Container) Batch ¶
func (c *Container) Batch(batchFunc func(*Container) error) error
Batch starts a batch operation on the given container All commands in the passed function will execute under the same lock and without syncronyzing state after each operation This will result in substantial performance benefits when running numerous commands on the same container Note that the container passed into the Batch function cannot be removed during batched operations. runtime.RemoveContainer can only be called outside of Batch Any error returned by the given batch function will be returned unmodified by Batch As Batch normally disables updating the current state of the container, the Sync() function is provided to enable container state to be updated and checked within Batch.

func (*Container) BindMounts ¶
func (c *Container) BindMounts() (map[string]string, error)
BindMounts retrieves bind mounts that were created by libpod and will be added to the container All these mounts except /dev/shm are ignored if a mount in the given spec has the same destination These mounts include /etc/resolv.conf, /etc/hosts, and /etc/hostname The return is formatted as a map from destination (mountpoint in the container) to source (path of the file that will be mounted into the container) If the container has not been started yet, an empty map will be returned, as the files in question are only created when the container is started.

func (*Container) CGroupPath ¶
func (c *Container) CGroupPath() (string, error)
CGroupPath returns a cgroups "path" for a given container.

func (*Container) CgroupParent ¶
func (c *Container) CgroupParent() string
CgroupParent gets the container's CGroup parent

func (*Container) Checkpoint ¶
func (c *Container) Checkpoint(ctx context.Context, options ContainerCheckpointOptions) error
Checkpoint checkpoints a container

func (*Container) CheckpointPath ¶
func (c *Container) CheckpointPath() string
CheckpointPath returns the path to the directory containing the checkpoint

func (*Container) Cleanup ¶
func (c *Container) Cleanup(ctx context.Context) error
Cleanup unmounts all mount points in container and cleans up container storage It also cleans up the network stack

func (*Container) Command ¶
func (c *Container) Command() []string
Command is the container's command This is not added to the spec, but is instead used during image commit

func (*Container) Commit ¶
func (c *Container) Commit(ctx context.Context, destImage string, options ContainerCommitOptions) (*image.Image, error)
Commit commits the changes between a container and its image, creating a new image

func (*Container) Config ¶
func (c *Container) Config() *ContainerConfig
Config returns the configuration used to create the container

func (*Container) ConmonPID ¶
func (c *Container) ConmonPID() (int, error)
ConmonPID Returns the PID of the container's conmon process. If the container is not running, a PID of 0 will be returned. No error will occur.

func (*Container) ContainerState ¶
func (c *Container) ContainerState() (*ContainerState, error)
ContainerState returns containerstate struct

func (*Container) ControlSocketPath ¶
func (c *Container) ControlSocketPath() string
ControlSocketPath returns the path to the containers control socket for things like tty resizing

func (*Container) CreatedTime ¶
func (c *Container) CreatedTime() time.Time
CreatedTime gets the time when the container was created

func (*Container) DNSOption ¶
func (c *Container) DNSOption() []string
DNSOption returns the DNS options that will be used in the container's resolv.conf If empty, options from the host's resolv.conf will be used instead

func (*Container) DNSSearch ¶
func (c *Container) DNSSearch() []string
DNSSearch returns the DNS search domains that will be used in the container's resolv.conf If empty, DNS Search domains from the host's resolv.conf will be used instead

func (*Container) DNSServers ¶
func (c *Container) DNSServers() []net.IP
DNSServers returns DNS servers that will be used in the container's resolv.conf If empty, DNS server from the host's resolv.conf will be used instead

func (*Container) Dependencies ¶
func (c *Container) Dependencies() []string
Dependencies gets the containers this container depends upon

func (*Container) Entrypoint ¶
func (c *Container) Entrypoint() []string
Entrypoint is the container's entrypoint. This is not added to the spec, but is instead used during image commit.

func (*Container) Exec ¶
func (c *Container) Exec(config *ExecConfig, streams *define.AttachStreams, resize <-chan remotecommand.TerminalSize) (int, error)
Exec emulates the old Libpod exec API, providing a single call to create, run, and remove an exec session. Returns exit code and error. Exit code is not guaranteed to be set sanely if error is not nil.

func (*Container) ExecCleanup ¶
func (c *Container) ExecCleanup(sessionID string) error
ExecCleanup cleans up an exec session in the container, removing temporary files associated with it.

func (*Container) ExecCreate ¶
func (c *Container) ExecCreate(config *ExecConfig) (string, error)
ExecCreate creates a new exec session for the container. The session is not started. The ID of the new exec session will be returned.

func (*Container) ExecHTTPStartAndAttach ¶
func (c *Container) ExecHTTPStartAndAttach(sessionID string, httpCon net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, detachKeys *string, cancel <-chan bool) (deferredErr error)
ExecHTTPStartAndAttach starts and performs an HTTP attach to an exec session.

func (*Container) ExecRemove ¶
func (c *Container) ExecRemove(sessionID string, force bool) error
ExecRemove removes an exec session in the container. If force is given, the session will be stopped first if it is running.

func (*Container) ExecResize ¶
func (c *Container) ExecResize(sessionID string, newSize remotecommand.TerminalSize) error
ExecResize resizes the TTY of the given exec session. Only available if the exec session created a TTY.

func (*Container) ExecSession ¶
func (c *Container) ExecSession(id string) (*ExecSession, error)
ExecSession retrieves detailed information on a single active exec session in a container

func (*Container) ExecSessions ¶
func (c *Container) ExecSessions() ([]string, error)
ExecSessions retrieves active exec sessions running in the container

func (*Container) ExecStart ¶
func (c *Container) ExecStart(sessionID string) error
ExecStart starts an exec session in the container, but does not attach to it. Returns immediately upon starting the exec session, unlike other ExecStart functions, which will only return when the exec session exits.

func (*Container) ExecStartAndAttach ¶
func (c *Container) ExecStartAndAttach(sessionID string, streams *define.AttachStreams) error
ExecStartAndAttach starts and attaches to an exec session in a container. TODO: Should we include detach keys in the signature to allow override? TODO: How do we handle AttachStdin/AttachStdout/AttachStderr?

func (*Container) ExecStop ¶
func (c *Container) ExecStop(sessionID string, timeout *uint) error
ExecStop stops an exec session in the container. If a timeout is provided, it will be used; otherwise, the timeout will default to the stop timeout of the container. Cleanup will be invoked automatically once the session is stopped.

func (*Container) ExitCode ¶
func (c *Container) ExitCode() (int32, bool, error)
ExitCode returns the exit code of the container as an int32, and whether the container has exited. If the container has not exited, exit code will always be 0. If the container restarts, the exit code is reset to 0.

func (*Container) Export ¶
func (c *Container) Export(path string) error
Export exports a container's root filesystem as a tar archive The archive will be saved as a file at the given path

func (*Container) FinishedTime ¶
func (c *Container) FinishedTime() (time.Time, error)
FinishedTime is the time the container was stopped

func (*Container) GenerateForKube ¶
func (c *Container) GenerateForKube() (*v1.Pod, error)
GenerateForKube takes a slice of libpod containers and generates one v1.Pod description that includes just a single container.

func (*Container) GetArtifact ¶
func (c *Container) GetArtifact(name string) ([]byte, error)
GetArtifact reads the specified artifact file from the container

func (*Container) GetContainerPidInformation ¶
func (c *Container) GetContainerPidInformation(descriptors []string) ([]string, error)
GetContainerPidInformation returns process-related data of all processes in the container. The output data can be controlled via the `descriptors` argument which expects format descriptors and supports all AIXformat descriptors of ps (1) plus some additional ones to for instance inspect the set of effective capabilities. Each element in the returned string slice is a tab-separated string.

For more details, please refer to github.com/containers/psgo.

func (*Container) GetContainerStats ¶
func (c *Container) GetContainerStats(previousStats *define.ContainerStats) (*define.ContainerStats, error)
GetContainerStats gets the running stats for a given container

func (*Container) GetHealthCheckLog ¶
func (c *Container) GetHealthCheckLog() (define.HealthCheckResults, error)
GetHealthCheckLog returns HealthCheck results by reading the container's health check log file. If the health check log file does not exist, then an empty healthcheck struct is returned

func (*Container) HTTPAttach ¶
func (c *Container) HTTPAttach(httpCon net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, detachKeys *string, cancel <-chan bool, streamAttach, streamLogs bool) (deferredErr error)
HTTPAttach forwards an attach session over a hijacked HTTP session. HTTPAttach will consume and close the included httpCon, which is expected to be sourced from a hijacked HTTP connection. The cancel channel is optional, and can be used to asynchronously cancel the attach session. The streams variable is only supported if the container was not a terminal, and allows specifying which of the container's standard streams will be forwarded to the client. This function returns when the attach finishes. It does not hold the lock for the duration of its runtime, only using it at the beginning to verify state. The streamLogs parameter indicates that all the container's logs until present will be streamed at the beginning of the attach. The streamAttach parameter indicates that the attach itself will be streamed over the socket; if this is not set, but streamLogs is, only the logs will be sent. At least one of streamAttach and streamLogs must be set.

func (*Container) HasHealthCheck ¶
func (c *Container) HasHealthCheck() bool
HasHealthCheck returns bool as to whether there is a health check defined for the container

func (*Container) HealthCheckConfig ¶
func (c *Container) HealthCheckConfig() *manifest.Schema2HealthConfig
HealthCheckConfig returns the command and timing attributes of the health check

func (*Container) HealthCheckStatus ¶
func (c *Container) HealthCheckStatus() (string, error)
HealthCheckStatus returns the current state of a container with a healthcheck

func (*Container) Hostname ¶
func (c *Container) Hostname() string
Hostname gets the container's hostname

func (*Container) HostsAdd ¶
func (c *Container) HostsAdd() []string
HostsAdd returns hosts that will be added to the container's hosts file The host system's hosts file is used as a base, and these are appended to it

func (*Container) ID ¶
func (c *Container) ID() string
ID returns the container's ID

func (*Container) IDMappings ¶
func (c *Container) IDMappings() (storage.IDMappingOptions, error)
IDMappings returns the UID/GID mapping used for the container

func (*Container) IPs ¶
func (c *Container) IPs() ([]net.IPNet, error)
IPs retrieves a container's IP address(es) This will only be populated if the container is configured to created a new network namespace, and that namespace is presently active

func (*Container) Image ¶
func (c *Container) Image() (string, string)
Image returns the ID and name of the image used as the container's rootfs.

func (*Container) Init ¶
func (c *Container) Init(ctx context.Context, recursive bool) error
Init creates a container in the OCI runtime, moving a container from ContainerStateConfigured, ContainerStateStopped, or ContainerStateExited to ContainerStateCreated. Once in Created state, Conmon will be running, which allows the container to be attached to. The container can subsequently transition to ContainerStateRunning via Start(), or be transitioned back to ContainerStateConfigured by Cleanup() (which will stop conmon and unmount the container). Init requires that all dependency containers be started (e.g. pod infra containers). The `recursive` parameter will, if set to true, start these dependency containers before initializing this container.

func (*Container) Inspect ¶
func (c *Container) Inspect(size bool) (*define.InspectContainerData, error)
Inspect a container for low-level information

func (*Container) IsInfra ¶
func (c *Container) IsInfra() bool
IsInfra returns whether the container is an infra container

func (*Container) IsReadOnly ¶
func (c *Container) IsReadOnly() bool
IsReadOnly returns whether the container is running in read only mode

func (*Container) Kill ¶
func (c *Container) Kill(signal uint) error
Kill sends a signal to a container

func (*Container) Labels ¶
func (c *Container) Labels() map[string]string
Labels returns the container's labels

func (*Container) LogDriver ¶
func (c *Container) LogDriver() string
LogDriver returns the log driver for this container

func (*Container) LogPath ¶
func (c *Container) LogPath() string
LogPath returns the path to the container's log file This file will only be present after Init() is called to create the container in the runtime

func (*Container) LogTag ¶
func (c *Container) LogTag() string
LogTag returns the tag to the container's log file

func (*Container) Mount ¶
func (c *Container) Mount() (string, error)
Mount mounts a container's filesystem on the host The path where the container has been mounted is returned

func (*Container) MountLabel ¶
func (c *Container) MountLabel() string
MountLabel returns the SELinux mount label of the container

func (*Container) Mounted ¶
func (c *Container) Mounted() (bool, string, error)
Mounted returns whether the container is mounted and the path it is mounted at (if it is mounted). If the container is not mounted, no error is returned, and the mountpoint will be set to "".

func (*Container) Name ¶
func (c *Container) Name() string
Name returns the container's name

func (*Container) NamedVolumes ¶
func (c *Container) NamedVolumes() []*ContainerNamedVolume
NamedVolumes returns the container's named volumes. The name of each is guaranteed to point to a valid libpod Volume present in the state.

func (*Container) Namespace ¶
func (c *Container) Namespace() string
Namespace returns the libpod namespace the container is in. Namespaces are used to logically separate containers and pods in the state.

func (*Container) NamespacePath ¶
func (c *Container) NamespacePath(linuxNS LinuxNS) (string, error)
NamespacePath returns the path of one of the container's namespaces If the container is not running, an error will be returned

func (*Container) NetworkDisabled ¶
func (c *Container) NetworkDisabled() (bool, error)
NetworkDisabled returns whether the container is running with a disabled network

func (*Container) NewNetNS ¶
func (c *Container) NewNetNS() bool
NewNetNS returns whether the container will create a new network namespace

func (*Container) OOMKilled ¶
func (c *Container) OOMKilled() (bool, error)
OOMKilled returns whether the container was killed by an OOM condition

func (*Container) PID ¶
func (c *Container) PID() (int, error)
PID returns the PID of the container. If the container is not running, a pid of 0 will be returned. No error will occur.

func (*Container) Pause ¶
func (c *Container) Pause() error
Pause pauses a container

func (*Container) PodID ¶
func (c *Container) PodID() string
PodID returns the full ID of the pod the container belongs to, or "" if it does not belong to a pod

func (*Container) PortMappings ¶
func (c *Container) PortMappings() ([]ocicni.PortMapping, error)
PortMappings returns the ports that will be mapped into a container if a new network namespace is created If NewNetNS() is false, this value is unused

func (*Container) Privileged ¶
func (c *Container) Privileged() bool
Privileged returns whether the container is privileged

func (*Container) ProcessLabel ¶
func (c *Container) ProcessLabel() string
ProcessLabel returns the selinux ProcessLabel of the container

func (*Container) RWSize ¶
func (c *Container) RWSize() (int64, error)
RWSize returns the rw size of the container

func (*Container) RawImageName ¶
func (c *Container) RawImageName() string
RawImageName returns the unprocessed and not-normalized user-specified image name.

func (*Container) ReadLog ¶
func (c *Container) ReadLog(ctx context.Context, options *logs.LogOptions, logChannel chan *logs.LogLine) error
ReadLog reads a containers log based on the input options and returns loglines over a channel.

func (*Container) Refresh ¶
func (c *Container) Refresh(ctx context.Context) error
Refresh is DEPRECATED and REMOVED.

func (*Container) RemoveArtifact ¶
func (c *Container) RemoveArtifact(name string) error
RemoveArtifact deletes the specified artifacts file

func (*Container) RestartPolicy ¶
func (c *Container) RestartPolicy() string
RestartPolicy returns the container's restart policy.

func (*Container) RestartRetries ¶
func (c *Container) RestartRetries() uint
RestartRetries returns the number of retries that will be attempted when using the "on-failure" restart policy

func (*Container) RestartWithTimeout ¶
func (c *Container) RestartWithTimeout(ctx context.Context, timeout uint) error
RestartWithTimeout restarts a running container and takes a given timeout in uint

func (*Container) Restore ¶
func (c *Container) Restore(ctx context.Context, options ContainerCheckpointOptions) error
Restore restores a container

func (*Container) RootFsSize ¶
func (c *Container) RootFsSize() (int64, error)
RootFsSize returns the root FS size of the container

func (*Container) RootGID ¶
func (c *Container) RootGID() int
RootGID returns the root user mapping from container

func (*Container) RootUID ¶
func (c *Container) RootUID() int
RootUID returns the root user mapping from container

func (*Container) Routes ¶
func (c *Container) Routes() ([]types.Route, error)
Routes retrieves a container's routes This will only be populated if the container is configured to created a new network namespace, and that namespace is presently active

func (*Container) RuntimeName ¶
func (c *Container) RuntimeName() string
RuntimeName returns the name of the runtime

func (*Container) ShmDir ¶
func (c *Container) ShmDir() string
ShmDir returns the sources path to be mounted on /dev/shm in container

func (*Container) ShmSize ¶
func (c *Container) ShmSize() int64
ShmSize returns the size of SHM device to be mounted into the container

func (*Container) Spec ¶
func (c *Container) Spec() *spec.Spec
Spec returns the container's OCI runtime spec The spec returned is the one used to create the container. The running spec may differ slightly as mounts are added based on the image

func (*Container) Start ¶
func (c *Container) Start(ctx context.Context, recursive bool) error
Start starts the given container. Start will accept container in ContainerStateConfigured, ContainerStateCreated, ContainerStateStopped, and ContainerStateExited, and transition them to ContainerStateRunning (all containers not in ContainerStateCreated will make an intermediate stop there via the Init API). Once in ContainerStateRunning, the container can be transitioned to ContainerStatePaused via Pause(), or to ContainerStateStopped by the process stopping (either due to exit, or being forced to stop by the Kill or Stop API calls). Start requites that all dependency containers (e.g. pod infra containers) be running before being run. The recursive parameter, if set, will start all dependencies before starting this container.

func (*Container) StartAndAttach ¶
func (c *Container) StartAndAttach(ctx context.Context, streams *define.AttachStreams, keys string, resize <-chan remotecommand.TerminalSize, recursive bool) (<-chan error, error)
StartAndAttach starts a container and attaches to it. This acts as a combination of the Start and Attach APIs, ensuring proper ordering of the two such that no output from the container is lost (e.g. the Attach call occurs before Start). In overall functionality, it is identical to the Start call, with the added side effect that an attach session will also be started.

func (*Container) StartedTime ¶
func (c *Container) StartedTime() (time.Time, error)
StartedTime is the time the container was started

func (*Container) State ¶
func (c *Container) State() (define.ContainerStatus, error)
State returns the current state of the container

func (*Container) StaticDir ¶
func (c *Container) StaticDir() string
StaticDir returns the directory used to store persistent container files

func (*Container) Stdin ¶
func (c *Container) Stdin() bool
Stdin returns whether STDIN on the container will be kept open

func (*Container) Stop ¶
func (c *Container) Stop() error
Stop uses the container's stop signal (or SIGTERM if no signal was specified) to stop the container, and if it has not stopped after container's stop timeout, SIGKILL is used to attempt to forcibly stop the container Default stop timeout is 10 seconds, but can be overridden when the container is created

func (*Container) StopSignal ¶
func (c *Container) StopSignal() uint
StopSignal is the signal that will be used to stop the container If it fails to stop the container, SIGKILL will be used after a timeout If StopSignal is 0, the default signal of SIGTERM will be used

func (*Container) StopTimeout ¶
func (c *Container) StopTimeout() uint
StopTimeout returns the container's stop timeout If the container's default stop signal fails to kill the container, SIGKILL will be used after this timeout

func (*Container) StopWithTimeout ¶
func (c *Container) StopWithTimeout(timeout uint) error
StopWithTimeout is a version of Stop that allows a timeout to be specified manually. If timeout is 0, SIGKILL will be used immediately to kill the container.

func (*Container) StoppedByUser ¶
func (c *Container) StoppedByUser() (bool, error)
StoppedByUser returns whether the container was last stopped by an explicit call to the Stop() API, or whether it exited naturally.

func (*Container) Sync ¶
func (c *Container) Sync() error
Sync updates the status of a container by querying the OCI runtime. If the container has not been created inside the OCI runtime, nothing will be done. Most of the time, Podman does not explicitly query the OCI runtime for container status, and instead relies upon exit files created by conmon. This can cause a disconnect between running state and what Podman sees in cases where Conmon was killed unexpected, or runc was upgraded. Running a manual Sync() ensures that container state will be correct in such situations.

func (*Container) Systemd ¶
func (c *Container) Systemd() bool
Systemd returns whether the container will be running in systemd mode

func (*Container) Top ¶
func (c *Container) Top(descriptors []string) ([]string, error)
Top gathers statistics about the running processes in a container. It returns a []string for output

func (*Container) Unmount ¶
func (c *Container) Unmount(force bool) error
Unmount unmounts a container's filesystem on the host

func (*Container) Unpause ¶
func (c *Container) Unpause() error
Unpause unpauses a container

func (*Container) User ¶
func (c *Container) User() string
User returns the user who the container is run as

func (*Container) UserVolumes ¶
func (c *Container) UserVolumes() []string
UserVolumes returns user-added volume mounts in the container. These are not added to the spec, but are used during image commit and to trigger some OCI hooks.

func (*Container) Wait ¶
func (c *Container) Wait() (int32, error)
Wait blocks until the container exits and returns its exit code.

func (*Container) WaitForConditionWithInterval ¶
func (c *Container) WaitForConditionWithInterval(waitTimeout time.Duration, condition define.ContainerStatus) (int32, error)
func (*Container) WaitWithInterval ¶
func (c *Container) WaitWithInterval(waitTimeout time.Duration) (int32, error)
WaitWithInterval blocks until the container to exit and returns its exit code. The argument is the interval at which checks the container's status.

func (*Container) WorkingDir ¶
func (c *Container) WorkingDir() string
WorkingDir returns the containers working dir

type ContainerCheckpointOptions ¶
type ContainerCheckpointOptions struct {
	// Keep tells the API to not delete checkpoint artifacts
	Keep bool
	// KeepRunning tells the API to keep the container running
	// after writing the checkpoint to disk
	KeepRunning bool
	// TCPEstablished tells the API to checkpoint a container
	// even if it contains established TCP connections
	TCPEstablished bool
	// TargetFile tells the API to read (or write) the checkpoint image
	// from (or to) the filename set in TargetFile
	TargetFile string
	// Name tells the API that during restore from an exported
	// checkpoint archive a new name should be used for the
	// restored container
	Name string
	// IgnoreRootfs tells the API to not export changes to
	// the container's root file-system (or to not import)
	IgnoreRootfs bool
	// IgnoreStaticIP tells the API to ignore the IP set
	// during 'podman run' with '--ip'. This is especially
	// important to be able to restore a container multiple
	// times with '--import --name'.
	IgnoreStaticIP bool
	// IgnoreStaticMAC tells the API to ignore the MAC set
	// during 'podman run' with '--mac-address'. This is especially
	// important to be able to restore a container multiple
	// times with '--import --name'.
	IgnoreStaticMAC bool
}
ContainerCheckpointOptions is a struct used to pass the parameters for checkpointing (and restoring) to the corresponding functions

type ContainerCommitOptions ¶
type ContainerCommitOptions struct {
	buildah.CommitOptions
	Pause          bool
	IncludeVolumes bool
	Author         string
	Message        string
	Changes        []string
}
ContainerCommitOptions is a struct used to commit a container to an image It uses buildah's CommitOptions as a base. Long-term we might wish to add these to the buildah struct once buildah is more integrated with libpod

type ContainerConfig ¶
type ContainerConfig struct {
	Spec *spec.Spec `json:"spec"`
	ID   string     `json:"id"`
	Name string     `json:"name"`
	// Full ID of the pood the container belongs to
	Pod string `json:"pod,omitempty"`
	// Namespace the container is in
	Namespace string `json:"namespace,omitempty"`
	// ID of this container's lock
	LockID uint32 `json:"lockID"`

	// CreateCommand is the full command plus arguments of the process the
	// container has been created with.
	CreateCommand []string `json:"CreateCommand,omitempty"`

	// RawImageName is the raw and unprocessed name of the image when creating
	// the container (as specified by the user).  May or may not be set.  One
	// use case to store this data are auto-updates where we need the _exact_
	// name and not some normalized instance of it.
	RawImageName string `json:"RawImageName,omitempty"`

	// UID/GID mappings used by the storage
	IDMappings storage.IDMappingOptions `json:"idMappingsOptions,omitempty"`

	// Information on the image used for the root filesystem
	RootfsImageID   string `json:"rootfsImageID,omitempty"`
	RootfsImageName string `json:"rootfsImageName,omitempty"`
	// Rootfs to use for the container, this conflicts with RootfsImageID
	Rootfs string `json:"rootfs,omitempty"`
	// Src path to be mounted on /dev/shm in container.
	ShmDir string `json:"ShmDir,omitempty"`
	// Size of the container's SHM.
	ShmSize int64 `json:"shmSize"`
	// Static directory for container content that will persist across
	// reboot.
	StaticDir string `json:"staticDir"`
	// Mounts list contains all additional mounts into the container rootfs.
	// These include the SHM mount.
	// These must be unmounted before the container's rootfs is unmounted.
	Mounts []string `json:"mounts,omitempty"`
	// NamedVolumes lists the named volumes to mount into the container.
	NamedVolumes []*ContainerNamedVolume `json:"namedVolumes,omitempty"`
	// CreateWorkingDir indicates that Libpod should create the container's
	// working directory if it does not exist. Some OCI runtimes do this by
	// default, but others do not.
	CreateWorkingDir bool `json:"createWorkingDir,omitempty"`

	// Whether the container is privileged
	Privileged bool `json:"privileged"`
	// SELinux process label for container
	ProcessLabel string `json:"ProcessLabel,omitempty"`
	// SELinux mount label for root filesystem
	MountLabel string `json:"MountLabel,omitempty"`
	// LabelOpts are options passed in by the user to setup SELinux labels
	LabelOpts []string `json:"labelopts,omitempty"`
	// User and group to use in the container
	// Can be specified by name or UID/GID
	User string `json:"user,omitempty"`
	// Additional groups to add
	Groups []string `json:"groups,omitempty"`
	// AddCurrentUserPasswdEntry indicates that the current user passwd entry
	// should be added to the /etc/passwd within the container
	AddCurrentUserPasswdEntry bool `json:"addCurrentUserPasswdEntry,omitempty"`

	// Namespace Config
	// IDs of container to share namespaces with
	// NetNsCtr conflicts with the CreateNetNS bool
	// These containers are considered dependencies of the given container
	// They must be started before the given container is started
	IPCNsCtr    string `json:"ipcNsCtr,omitempty"`
	MountNsCtr  string `json:"mountNsCtr,omitempty"`
	NetNsCtr    string `json:"netNsCtr,omitempty"`
	PIDNsCtr    string `json:"pidNsCtr,omitempty"`
	UserNsCtr   string `json:"userNsCtr,omitempty"`
	UTSNsCtr    string `json:"utsNsCtr,omitempty"`
	CgroupNsCtr string `json:"cgroupNsCtr,omitempty"`

	// IDs of dependency containers.
	// These containers must be started before this container is started.
	Dependencies []string

	// CreateNetNS indicates that libpod should create and configure a new
	// network namespace for the container.
	// This cannot be set if NetNsCtr is also set.
	CreateNetNS bool `json:"createNetNS"`
	// StaticIP is a static IP to request for the container.
	// This cannot be set unless CreateNetNS is set.
	// If not set, the container will be dynamically assigned an IP by CNI.
	StaticIP net.IP `json:"staticIP"`
	// StaticMAC is a static MAC to request for the container.
	// This cannot be set unless CreateNetNS is set.
	// If not set, the container will be dynamically assigned a MAC by CNI.
	StaticMAC net.HardwareAddr `json:"staticMAC"`
	// PortMappings are the ports forwarded to the container's network
	// namespace
	// These are not used unless CreateNetNS is true
	PortMappings []ocicni.PortMapping `json:"portMappings,omitempty"`
	// UseImageResolvConf indicates that resolv.conf should not be
	// bind-mounted inside the container.
	// Conflicts with DNSServer, DNSSearch, DNSOption.
	UseImageResolvConf bool
	// DNS servers to use in container resolv.conf
	// Will override servers in host resolv if set
	DNSServer []net.IP `json:"dnsServer,omitempty"`
	// DNS Search domains to use in container resolv.conf
	// Will override search domains in host resolv if set
	DNSSearch []string `json:"dnsSearch,omitempty"`
	// DNS options to be set in container resolv.conf
	// With override options in host resolv if set
	DNSOption []string `json:"dnsOption,omitempty"`
	// UseImageHosts indicates that /etc/hosts should not be
	// bind-mounted inside the container.
	// Conflicts with HostAdd.
	UseImageHosts bool
	// Hosts to add in container
	// Will be appended to host's host file
	HostAdd []string `json:"hostsAdd,omitempty"`
	// Network names (CNI) to add container to. Empty to use default network.
	Networks []string `json:"networks,omitempty"`
	// Network mode specified for the default network.
	NetMode namespaces.NetworkMode `json:"networkMode,omitempty"`

	// UserVolumes contains user-added volume mounts in the container.
	// These will not be added to the container's spec, as it is assumed
	// they are already present in the spec given to Libpod. Instead, it is
	// used when committing containers to generate the VOLUMES field of the
	// image that is created, and for triggering some OCI hooks which do not
	// fire unless user-added volume mounts are present.
	UserVolumes []string `json:"userVolumes,omitempty"`
	// Entrypoint is the container's entrypoint.
	// It is not used in spec generation, but will be used when the
	// container is committed to populate the entrypoint of the new image.
	Entrypoint []string `json:"entrypoint,omitempty"`
	// Command is the container's command.
	// It is not used in spec generation, but will be used when the
	// container is committed to populate the command of the new image.
	Command []string `json:"command,omitempty"`

	// Whether to keep container STDIN open
	Stdin bool `json:"stdin,omitempty"`
	// Labels is a set of key-value pairs providing additional information
	// about a container
	Labels map[string]string `json:"labels,omitempty"`
	// StopSignal is the signal that will be used to stop the container
	StopSignal uint `json:"stopSignal,omitempty"`
	// StopTimeout is the signal that will be used to stop the container
	StopTimeout uint `json:"stopTimeout,omitempty"`
	// Time container was created
	CreatedTime time.Time `json:"createdTime"`
	// NoCgroups indicates that the container will not create CGroups. It is
	// incompatible with CgroupParent.  Deprecated in favor of CgroupsMode.
	NoCgroups bool `json:"noCgroups,omitempty"`
	// CgroupsMode indicates how the container will create cgroups
	// (disabled, no-conmon, enabled).  It supersedes NoCgroups.
	CgroupsMode string `json:"cgroupsMode,omitempty"`
	// Cgroup parent of the container
	CgroupParent string `json:"cgroupParent"`
	// LogPath log location
	LogPath string `json:"logPath"`
	// LogTag is the tag used for logging
	LogTag string `json:"logTag"`
	// LogDriver driver for logs
	LogDriver string `json:"logDriver"`
	// File containing the conmon PID
	ConmonPidFile string `json:"conmonPidFile,omitempty"`
	// RestartPolicy indicates what action the container will take upon
	// exiting naturally.
	// Allowed options are "no" (take no action), "on-failure" (restart on
	// non-zero exit code, up an a maximum of RestartRetries times),
	// and "always" (always restart the container on any exit code).
	// The empty string is treated as the default ("no")
	RestartPolicy string `json:"restart_policy,omitempty"`
	// RestartRetries indicates the number of attempts that will be made to
	// restart the container. Used only if RestartPolicy is set to
	// "on-failure".
	RestartRetries uint `json:"restart_retries,omitempty"`

	// PostConfigureNetNS needed when a user namespace is created by an OCI runtime
	// if the network namespace is created before the user namespace it will be
	// owned by the wrong user namespace.
	PostConfigureNetNS bool `json:"postConfigureNetNS"`

	// OCIRuntime used to create the container
	OCIRuntime string `json:"runtime,omitempty"`

	// ExitCommand is the container's exit command.
	// This Command will be executed when the container exits
	ExitCommand []string `json:"exitCommand,omitempty"`
	// IsInfra is a bool indicating whether this container is an infra container used for
	// sharing kernel namespaces in a pod
	IsInfra bool `json:"pause"`

	// Systemd tells libpod to setup the container in systemd mode
	Systemd bool `json:"systemd"`

	// HealthCheckConfig has the health check command and related timings
	HealthCheckConfig *manifest.Schema2HealthConfig `json:"healthcheck"`
}
ContainerConfig contains all information that was used to create the container. It may not be changed once created. It is stored, read-only, on disk

type ContainerFilter ¶
type ContainerFilter func(*Container) bool
ContainerFilter is a function to determine whether a container is included in command output. Containers to be outputted are tested using the function. A true return will include the container, a false return will exclude it.

type ContainerGraph ¶
type ContainerGraph struct {
	// contains filtered or unexported fields
}
ContainerGraph is a dependency graph based on a set of containers.

func BuildContainerGraph ¶
func BuildContainerGraph(ctrs []*Container) (*ContainerGraph, error)
BuildContainerGraph builds a dependency graph based on the container slice.

func (*ContainerGraph) DependencyMap ¶
func (cg *ContainerGraph) DependencyMap() (dependencies map[*Container][]*Container)
DependencyMap returns the dependency graph as map with the key being a container and the value being the containers the key depends on.

type ContainerInfo ¶
type ContainerInfo struct {
	Dir          string
	RunDir       string
	Config       *v1.Image
	ProcessLabel string
	MountLabel   string
	UIDMap       []idtools.IDMap
	GIDMap       []idtools.IDMap
}
ContainerInfo wraps a subset of information about a container: the locations of its nonvolatile and volatile per-container directories, along with a copy of the configuration blob from the image that was used to create the container, if the image had a configuration. It also returns the ProcessLabel and MountLabel selected for the container

type ContainerNamedVolume ¶
type ContainerNamedVolume struct {
	// Name is the name of the volume to mount in.
	// Must resolve to a valid volume present in this Podman.
	Name string `json:"volumeName"`
	// Dest is the mount's destination
	Dest string `json:"dest"`
	// Options are fstab style mount options
	Options []string `json:"options,omitempty"`
}
ContainerNamedVolume is a named volume that will be mounted into the container. Each named volume is a libpod Volume present in the state.

type ContainerState ¶
type ContainerState struct {
	// The current state of the running container
	State define.ContainerStatus `json:"state"`
	// The path to the JSON OCI runtime spec for this container
	ConfigPath string `json:"configPath,omitempty"`
	// RunDir is a per-boot directory for container content
	RunDir string `json:"runDir,omitempty"`
	// Mounted indicates whether the container's storage has been mounted
	// for use
	Mounted bool `json:"mounted,omitempty"`
	// Mountpoint contains the path to the container's mounted storage as given
	// by containers/storage.
	Mountpoint string `json:"mountPoint,omitempty"`
	// StartedTime is the time the container was started
	StartedTime time.Time `json:"startedTime,omitempty"`
	// FinishedTime is the time the container finished executing
	FinishedTime time.Time `json:"finishedTime,omitempty"`
	// ExitCode is the exit code returned when the container stopped
	ExitCode int32 `json:"exitCode,omitempty"`
	// Exited is whether the container has exited
	Exited bool `json:"exited,omitempty"`
	// OOMKilled indicates that the container was killed as it ran out of
	// memory
	OOMKilled bool `json:"oomKilled,omitempty"`
	// PID is the PID of a running container
	PID int `json:"pid,omitempty"`
	// ConmonPID is the PID of the container's conmon
	ConmonPID int `json:"conmonPid,omitempty"`
	// ExecSessions contains all exec sessions that are associated with this
	// container.
	ExecSessions map[string]*ExecSession `json:"newExecSessions,omitempty"`
	// LegacyExecSessions are legacy exec sessions from older versions of
	// Podman.
	// These are DEPRECATED and will be removed in a future release.
	LegacyExecSessions map[string]*legacyExecSession `json:"execSessions,omitempty"`
	// NetworkStatus contains the configuration results for all networks
	// the pod is attached to. Only populated if we created a network
	// namespace for the container, and the network namespace is currently
	// active
	NetworkStatus []*cnitypes.Result `json:"networkResults,omitempty"`
	// BindMounts contains files that will be bind-mounted into the
	// container when it is mounted.
	// These include /etc/hosts and /etc/resolv.conf
	// This maps the path the file will be mounted to in the container to
	// the path of the file on disk outside the container
	BindMounts map[string]string `json:"bindMounts,omitempty"`
	// StoppedByUser indicates whether the container was stopped by an
	// explicit call to the Stop() API.
	StoppedByUser bool `json:"stoppedByUser,omitempty"`
	// RestartPolicyMatch indicates whether the conditions for restart
	// policy have been met.
	RestartPolicyMatch bool `json:"restartPolicyMatch,omitempty"`
	// RestartCount is how many times the container was restarted by its
	// restart policy. This is NOT incremented by normal container restarts
	// (only by restart policy).
	RestartCount uint `json:"restartCount,omitempty"`

	// ExtensionStageHooks holds hooks which will be executed by libpod
	// and not delegated to the OCI runtime.
	ExtensionStageHooks map[string][]spec.Hook `json:"extensionStageHooks,omitempty"`
	// contains filtered or unexported fields
}
ContainerState contains the current state of the container It is stored on disk in a tmpfs and recreated on reboot

type CtrCreateOption ¶
type CtrCreateOption func(*Container) error
A CtrCreateOption is a functional option which alters the Container created by NewContainer

func WithAddCurrentUserPasswdEntry ¶
added in v2.0.5
func WithAddCurrentUserPasswdEntry() CtrCreateOption
WithAddCurrentUserPasswdEntry indicates that container should add current user entry to /etc/passwd, since the UID will be mapped into the container, via user namespace

func WithCgroupNSFrom ¶
func WithCgroupNSFrom(nsCtr *Container) CtrCreateOption
WithCgroupNSFrom indicates the the container should join the CGroup namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithCgroupParent ¶
func WithCgroupParent(parent string) CtrCreateOption
WithCgroupParent sets the Cgroup Parent of the new container.

func WithCgroupsMode ¶
func WithCgroupsMode(mode string) CtrCreateOption
WithCgroupsMode disables the creation of CGroups for the conmon process.

func WithCommand ¶
func WithCommand(command []string) CtrCreateOption
WithCommand sets the command of the container. This is not used to change the container's spec, but will instead be used during commit to populate the command of the new image. If not explicitly set it will default to the image's command. A nil command is allowed, and will clear command on the created image.

func WithConmonPidFile ¶
func WithConmonPidFile(path string) CtrCreateOption
WithConmonPidFile specifies the path to the file that receives the pid of conmon.

func WithCreateCommand ¶
func WithCreateCommand(cmd []string) CtrCreateOption
WithCreateCommand adds the full command plus arguments of the current process to the container config.

func WithCreateWorkingDir ¶
added in v2.0.5
func WithCreateWorkingDir() CtrCreateOption
WithCreateWorkingDir tells Podman to create the container's working directory if it does not exist.

func WithCtrNamespace ¶
func WithCtrNamespace(ns string) CtrCreateOption
WithCtrNamespace sets the namespace the container will be created in. Namespaces are used to create separate views of Podman's state - runtimes can join a specific namespace and see only containers and pods in that namespace. Empty string namespaces are allowed, and correspond to a lack of namespace.

func WithDNS ¶
func WithDNS(dnsServers []string) CtrCreateOption
WithDNS sets additional name servers for the container.

func WithDNSOption ¶
func WithDNSOption(dnsOptions []string) CtrCreateOption
WithDNSOption sets addition dns options for the container.

func WithDNSSearch ¶
func WithDNSSearch(searchDomains []string) CtrCreateOption
WithDNSSearch sets the additional search domains of a container.

func WithDependencyCtrs ¶
func WithDependencyCtrs(ctrs []*Container) CtrCreateOption
WithDependencyCtrs sets dependency containers of the given container. Dependency containers must be running before this container is started.

func WithEntrypoint ¶
func WithEntrypoint(entrypoint []string) CtrCreateOption
WithEntrypoint sets the entrypoint of the container. This is not used to change the container's spec, but will instead be used during commit to populate the entrypoint of the new image. If not explicitly set it will default to the image's entrypoint. A nil entrypoint is allowed, and will clear entrypoint on the created image.

func WithExitCommand ¶
func WithExitCommand(exitCommand []string) CtrCreateOption
WithExitCommand sets the ExitCommand for the container, appending on the ctr.ID() to the end

func WithGroups ¶
func WithGroups(groups []string) CtrCreateOption
WithGroups sets additional groups for the container, which are defined by the user.

func WithHealthCheck ¶
func WithHealthCheck(healthCheck *manifest.Schema2HealthConfig) CtrCreateOption
WithHealthCheck adds the healthcheck to the container config

func WithHosts ¶
func WithHosts(hosts []string) CtrCreateOption
WithHosts sets additional host:IP for the hosts file.

func WithIDMappings ¶
func WithIDMappings(idmappings storage.IDMappingOptions) CtrCreateOption
WithIDMappings sets the idmappsings for the container

func WithIPCNSFrom ¶
func WithIPCNSFrom(nsCtr *Container) CtrCreateOption
WithIPCNSFrom indicates the the container should join the IPC namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithLabels ¶
func WithLabels(labels map[string]string) CtrCreateOption
WithLabels adds labels to the container.

func WithLogDriver ¶
func WithLogDriver(driver string) CtrCreateOption
WithLogDriver sets the log driver for the container

func WithLogPath ¶
func WithLogPath(path string) CtrCreateOption
WithLogPath sets the path to the log file.

func WithLogTag ¶
func WithLogTag(tag string) CtrCreateOption
WithLogTag sets the tag to the log file.

func WithMountNSFrom ¶
func WithMountNSFrom(nsCtr *Container) CtrCreateOption
WithMountNSFrom indicates the the container should join the mount namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithName ¶
func WithName(name string) CtrCreateOption
WithName sets the container's name.

func WithNamedVolumes ¶
func WithNamedVolumes(volumes []*ContainerNamedVolume) CtrCreateOption
WithNamedVolumes adds the given named volumes to the container.

func WithNetNS ¶
func WithNetNS(portMappings []ocicni.PortMapping, postConfigureNetNS bool, netmode string, networks []string) CtrCreateOption
WithNetNS indicates that the container should be given a new network namespace with a minimal configuration. An optional array of port mappings can be provided. Conflicts with WithNetNSFrom().

func WithNetNSFrom ¶
func WithNetNSFrom(nsCtr *Container) CtrCreateOption
WithNetNSFrom indicates the the container should join the network namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithPIDNSFrom ¶
func WithPIDNSFrom(nsCtr *Container) CtrCreateOption
WithPIDNSFrom indicates the the container should join the PID namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithPrivileged ¶
func WithPrivileged(privileged bool) CtrCreateOption
WithPrivileged sets the privileged flag in the container runtime.

func WithRestartPolicy ¶
func WithRestartPolicy(policy string) CtrCreateOption
WithRestartPolicy sets the container's restart policy. Valid values are "no", "on-failure", and "always". The empty string is allowed, and will be equivalent to "no".

func WithRestartRetries ¶
func WithRestartRetries(tries uint) CtrCreateOption
WithRestartRetries sets the number of retries to use when restarting a container with the "on-failure" restart policy. 0 is an allowed value, and indicates infinite retries.

func WithRootFS ¶
func WithRootFS(rootfs string) CtrCreateOption
WithRootFS sets the rootfs for the container. This creates a container from a directory on disk and not an image.

func WithRootFSFromImage ¶
func WithRootFSFromImage(imageID, imageName, rawImageName string) CtrCreateOption
WithRootFSFromImage sets up a fresh root filesystem using the given image. If useImageConfig is specified, image volumes, environment variables, and other configuration from the image will be added to the config. TODO: Replace image name and ID with a libpod.Image struct when that is finished.

func WithSecLabels ¶
func WithSecLabels(labelOpts []string) CtrCreateOption
WithSecLabels sets the labels for SELinux.

func WithShmDir ¶
func WithShmDir(dir string) CtrCreateOption
WithShmDir sets the directory that should be mounted on /dev/shm.

func WithShmSize ¶
func WithShmSize(size int64) CtrCreateOption
WithShmSize sets the size of /dev/shm tmpfs mount.

func WithStaticIP ¶
func WithStaticIP(ip net.IP) CtrCreateOption
WithStaticIP indicates that the container should request a static IP from the CNI plugins. It cannot be set unless WithNetNS has already been passed. Further, it cannot be set if additional CNI networks to join have been specified.

func WithStaticMAC ¶
func WithStaticMAC(mac net.HardwareAddr) CtrCreateOption
WithStaticMAC indicates that the container should request a static MAC from the CNI plugins. It cannot be set unless WithNetNS has already been passed. Further, it cannot be set if additional CNI networks to join have been specified.

func WithStdin ¶
func WithStdin() CtrCreateOption
WithStdin keeps stdin on the container open to allow interaction.

func WithStopSignal ¶
func WithStopSignal(signal syscall.Signal) CtrCreateOption
WithStopSignal sets the signal that will be sent to stop the container.

func WithStopTimeout ¶
func WithStopTimeout(timeout uint) CtrCreateOption
WithStopTimeout sets the time to after initial stop signal is sent to the container, before sending the kill signal.

func WithSystemd ¶
func WithSystemd() CtrCreateOption
WithSystemd turns on systemd mode in the container

func WithUTSNSFrom ¶
func WithUTSNSFrom(nsCtr *Container) CtrCreateOption
WithUTSNSFrom indicates the the container should join the UTS namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithUTSNSFromPod ¶
func WithUTSNSFromPod(p *Pod) CtrCreateOption
WithUTSNSFromPod indicates the the container should join the UTS namespace of its pod

func WithUseImageHosts ¶
func WithUseImageHosts() CtrCreateOption
WithUseImageHosts tells the container not to bind-mount /etc/hosts in. This conflicts with WithHosts().

func WithUseImageResolvConf ¶
func WithUseImageResolvConf() CtrCreateOption
WithUseImageResolvConf tells the container not to bind-mount resolv.conf in. This conflicts with other DNS-related options.

func WithUser ¶
func WithUser(user string) CtrCreateOption
WithUser sets the user identity field in configutation. Valid uses [user | user:group | uid | uid:gid | user:gid | uid:group ].

func WithUserNSFrom ¶
func WithUserNSFrom(nsCtr *Container) CtrCreateOption
WithUserNSFrom indicates the the container should join the user namespace of the given container. If the container has joined a pod, it can only join the namespaces of containers in the same pod.

func WithUserVolumes ¶
func WithUserVolumes(volumes []string) CtrCreateOption
WithUserVolumes sets the user-added volumes of the container. These are not added to the container's spec, but will instead be used during commit to populate the volumes of the new image, and to trigger some OCI hooks that are only added if volume mounts are present. Furthermore, they are used in the output of inspect, to filter volumes - only volumes included in this list will be included in the output. Unless explicitly set, committed images will have no volumes. The given volumes slice must not be nil.

type DBConfig ¶
type DBConfig struct {
	LibpodRoot  string
	LibpodTmp   string
	StorageRoot string
	StorageTmp  string
	GraphDriver string
	VolumePath  string
}
DBConfig is a set of Libpod runtime configuration settings that are saved in a State when it is first created, and can subsequently be retrieved.

type ExecConfig ¶
type ExecConfig struct {
	// Command the the command that will be invoked in the exec session.
	// Must not be empty.
	Command []string `json:"command"`
	// Terminal is whether the exec session will allocate a pseudoterminal.
	Terminal bool `json:"terminal,omitempty"`
	// AttachStdin is whether the STDIN stream will be forwarded to the exec
	// session's first process when attaching. Only available if Terminal is
	// false.
	AttachStdin bool `json:"attachStdin,omitempty"`
	// AttachStdout is whether the STDOUT stream will be forwarded to the
	// exec session's first process when attaching. Only available if
	// Terminal is false.
	AttachStdout bool `json:"attachStdout,omitempty"`
	// AttachStderr is whether the STDERR stream will be forwarded to the
	// exec session's first process when attaching. Only available if
	// Terminal is false.
	AttachStderr bool `json:"attachStderr,omitempty"`
	// DetachKeys are keys that will be used to detach from the exec
	// session. Here, nil will use the default detach keys, where a pointer
	// to the empty string ("") will disable detaching via detach keys.
	DetachKeys *string `json:"detachKeys,omitempty"`
	// Environment is a set of environment variables that will be set for
	// the first process started by the exec session.
	Environment map[string]string `json:"environment,omitempty"`
	// Privileged is whether the exec session will be privileged - that is,
	// will be granted additional capabilities.
	Privileged bool `json:"privileged,omitempty"`
	// User is the user the exec session will be run as.
	// If set to "" the exec session will be started as the same user the
	// container was started as.
	User string `json:"user,omitempty"`
	// WorkDir is the working directory for the first process that will be
	// launched by the exec session.
	// If set to "" the exec session will be started in / within the
	// container.
	WorkDir string `json:"workDir,omitempty"`
	// PreserveFDs indicates that a number of extra FDs from the process
	// running libpod will be passed into the container. These are assumed
	// to begin at 3 (immediately after the standard streams). The number
	// given is the number that will be passed into the exec session,
	// starting at 3.
	PreserveFDs uint `json:"preserveFds,omitempty"`
	// ExitCommand is the exec session's exit command.
	// This command will be executed when the exec session exits.
	// If unset, no command will be executed.
	// Two arguments will be appended to the exit command by Libpod:
	// The ID of the exec session, and the ID of the container the exec
	// session is a part of (in that order).
	ExitCommand []string `json:"exitCommand,omitempty"`
	// ExitCommandDelay is a delay (in seconds) between the container
	// exiting, and the exit command being executed. If set to 0, there is
	// no delay. If set, ExitCommand must also be set.
	ExitCommandDelay uint `json:"exitCommandDelay,omitempty"`
}
ExecConfig contains the configuration of an exec session

type ExecOptions ¶
type ExecOptions struct {
	// Cmd is the command to execute.
	Cmd []string
	// CapAdd is a set of capabilities to add to the executed command.
	CapAdd []string
	// Env is a set of environment variables to add to the container.
	Env map[string]string
	// Terminal is whether to create a new TTY for the exec session.
	Terminal bool
	// Cwd is the working directory for the executed command. If unset, the
	// working directory of the container will be used.
	Cwd string
	// User is the user the command will be executed as. If unset, the user
	// the container was run as will be used.
	User string
	// Streams are the streams that will be attached to the container.
	Streams *define.AttachStreams
	// PreserveFDs is a number of additional file descriptors (in addition
	// to 0, 1, 2) that will be passed to the executed process. The total FDs
	// passed will be 3 + PreserveFDs.
	PreserveFDs uint
	// DetachKeys is a set of keys that, when pressed in sequence, will
	// detach from the container.
	// If not provided, the default keys will be used.
	// If provided but set to "", detaching from the container will be
	// disabled.
	DetachKeys *string
	// ExitCommand is a command that will be run after the exec session
	// exits.
	ExitCommand []string
	// ExitCommandDelay is a delay (in seconds) between the exec session
	// exiting, and the exit command being invoked.
	ExitCommandDelay uint
}
ExecOptions are options passed into ExecContainer. They control the command that will be executed and how the exec will proceed.

type ExecSession ¶
type ExecSession struct {
	// Id is the ID of the exec session.
	// Named somewhat strangely to not conflict with ID().
	Id string `json:"id"`
	// ContainerId is the ID of the container this exec session belongs to.
	// Named somewhat strangely to not conflict with ContainerID().
	ContainerId string `json:"containerId"`

	// State is the state of the exec session.
	State define.ContainerExecStatus `json:"state"`
	// PID is the PID of the process created by the exec session.
	PID int `json:"pid,omitempty"`
	// ExitCode is the exit code of the exec session, if it has exited.
	ExitCode int `json:"exitCode,omitempty"`

	// Config is the configuration of this exec session.
	// Cannot be empty.
	Config *ExecConfig `json:"config"`
}
ExecSession contains information on a single exec session attached to a given container.

func (*ExecSession) ContainerID ¶
func (e *ExecSession) ContainerID() string
ContainerID returns the ID of the container this exec session was started in.

func (*ExecSession) ID ¶
func (e *ExecSession) ID() string
ID returns the ID of an exec session.

func (*ExecSession) Inspect ¶
func (e *ExecSession) Inspect() (*define.InspectExecSession, error)
Inspect inspects the given exec session and produces detailed output on its configuration and current state.

type HTTPAttachStreams ¶
type HTTPAttachStreams struct {
	Stdin  bool
	Stdout bool
	Stderr bool
}
HTTPAttachStreams informs the HTTPAttach endpoint which of the container's standard streams should be streamed to the client. If this is passed, at least one of the streams must be set to true.

type InMemoryState ¶
type InMemoryState struct {
	// contains filtered or unexported fields
}
An InMemoryState is a purely in-memory state store

func (*InMemoryState) AddContainer ¶
func (s *InMemoryState) AddContainer(ctr *Container) error
AddContainer adds a container to the state Containers in a pod cannot be added to the state

func (*InMemoryState) AddContainerToPod ¶
func (s *InMemoryState) AddContainerToPod(pod *Pod, ctr *Container) error
AddContainerToPod adds a container to the given pod, also adding it to the state

func (*InMemoryState) AddExecSession ¶
func (s *InMemoryState) AddExecSession(ctr *Container, session *ExecSession) error
Add an exec session to the database

func (*InMemoryState) AddPod ¶
func (s *InMemoryState) AddPod(pod *Pod) error
AddPod adds a given pod to the state

func (*InMemoryState) AddVolume ¶
func (s *InMemoryState) AddVolume(volume *Volume) error
AddVolume adds a volume to the state

func (*InMemoryState) AllContainers ¶
func (s *InMemoryState) AllContainers() ([]*Container, error)
AllContainers retrieves all containers from the state

func (*InMemoryState) AllPods ¶
func (s *InMemoryState) AllPods() ([]*Pod, error)
AllPods retrieves all pods currently in the state

func (*InMemoryState) AllVolumes ¶
func (s *InMemoryState) AllVolumes() ([]*Volume, error)
AllVolumes returns all volumes that exist in the state

func (*InMemoryState) Close ¶
func (s *InMemoryState) Close() error
Close the state before shutdown This is a no-op as we have no backing disk

func (*InMemoryState) Container ¶
func (s *InMemoryState) Container(id string) (*Container, error)
Container retrieves a container from its full ID

func (*InMemoryState) ContainerInUse ¶
func (s *InMemoryState) ContainerInUse(ctr *Container) ([]string, error)
ContainerInUse checks if the given container is being used by other containers

func (*InMemoryState) GetContainerConfig ¶
func (s *InMemoryState) GetContainerConfig(id string) (*ContainerConfig, error)
GetContainerConfig returns a container config from the database by full ID

func (*InMemoryState) GetContainerExecSessions ¶
func (s *InMemoryState) GetContainerExecSessions(ctr *Container) ([]string, error)
GetContainerExecSessions retrieves all exec sessions for the given container.

func (*InMemoryState) GetDBConfig ¶
func (s *InMemoryState) GetDBConfig() (*DBConfig, error)
GetDBConfig is not implemented for in-memory state. As we do not store a config, return an empty one.

func (*InMemoryState) GetExecSession ¶
func (s *InMemoryState) GetExecSession(id string) (string, error)
Get an exec session from the database by full or partial ID.

func (*InMemoryState) GetName ¶
added in v2.0.5
func (s *InMemoryState) GetName(id string) (string, error)
GetName retrieves the name associated with a given ID. Works with both Container and Pod IDs.

func (*InMemoryState) HasContainer ¶
func (s *InMemoryState) HasContainer(id string) (bool, error)
HasContainer checks if a container with the given ID is present in the state

func (*InMemoryState) HasPod ¶
func (s *InMemoryState) HasPod(id string) (bool, error)
HasPod checks if a pod with the given ID is present in the state

func (*InMemoryState) HasVolume ¶
func (s *InMemoryState) HasVolume(name string) (bool, error)
HasVolume checks if a volume with the given name is present in the state

func (*InMemoryState) LookupContainer ¶
func (s *InMemoryState) LookupContainer(idOrName string) (*Container, error)
LookupContainer retrieves a container by full ID, unique partial ID, or name

func (*InMemoryState) LookupContainerID ¶
func (s *InMemoryState) LookupContainerID(idOrName string) (string, error)
LookupContainerID retrieves a container ID by full ID, unique partial ID, or name

func (*InMemoryState) LookupPod ¶
func (s *InMemoryState) LookupPod(idOrName string) (*Pod, error)
LookupPod retrieves a pod from the state from a full or unique partial ID or a full name

func (*InMemoryState) LookupVolume ¶
func (s *InMemoryState) LookupVolume(name string) (*Volume, error)
LookupVolume finds a volume from an unambiguous partial ID.

func (*InMemoryState) Pod ¶
func (s *InMemoryState) Pod(id string) (*Pod, error)
Pod retrieves a pod from the state from its full ID

func (*InMemoryState) PodContainers ¶
func (s *InMemoryState) PodContainers(pod *Pod) ([]*Container, error)
PodContainers retrieves the containers from a pod

func (*InMemoryState) PodContainersByID ¶
func (s *InMemoryState) PodContainersByID(pod *Pod) ([]string, error)
PodContainersByID returns the IDs of all containers in the given pod

func (*InMemoryState) PodHasContainer ¶
func (s *InMemoryState) PodHasContainer(pod *Pod, ctrID string) (bool, error)
PodHasContainer checks if the given pod has a container with the given ID

func (*InMemoryState) Refresh ¶
func (s *InMemoryState) Refresh() error
Refresh clears container and pod stats after a reboot In-memory state won't survive a reboot so this is a no-op

func (*InMemoryState) RemoveContainer ¶
func (s *InMemoryState) RemoveContainer(ctr *Container) error
RemoveContainer removes a container from the state The container will only be removed from the state, not from the pod the container belongs to

func (*InMemoryState) RemoveContainerExecSessions ¶
func (s *InMemoryState) RemoveContainerExecSessions(ctr *Container) error
RemoveContainerExecSessions removes all exec sessions for the given container.

func (*InMemoryState) RemoveContainerFromPod ¶
func (s *InMemoryState) RemoveContainerFromPod(pod *Pod, ctr *Container) error
RemoveContainerFromPod removes the given container from the given pod The container is also removed from the state

func (*InMemoryState) RemoveExecSession ¶
func (s *InMemoryState) RemoveExecSession(session *ExecSession) error
RemoveExecSession removes an exec session from the database.

func (*InMemoryState) RemovePod ¶
func (s *InMemoryState) RemovePod(pod *Pod) error
RemovePod removes a given pod from the state Only empty pods can be removed

func (*InMemoryState) RemovePodContainers ¶
func (s *InMemoryState) RemovePodContainers(pod *Pod) error
RemovePodContainers removes all containers from a pod This is used to simultaneously remove a number of containers with many interdependencies Will only remove containers if no dependencies outside of the pod are present

func (*InMemoryState) RemoveVolume ¶
func (s *InMemoryState) RemoveVolume(volume *Volume) error
RemoveVolume removes a volume from the state

func (*InMemoryState) RewriteContainerConfig ¶
func (s *InMemoryState) RewriteContainerConfig(ctr *Container, newCfg *ContainerConfig) error
RewriteContainerConfig rewrites a container's configuration. This function is DANGEROUS, even with an in-memory state. Please read the full comment on it in state.go before using it.

func (*InMemoryState) RewritePodConfig ¶
func (s *InMemoryState) RewritePodConfig(pod *Pod, newCfg *PodConfig) error
RewritePodConfig rewrites a pod's configuration. This function is DANGEROUS, even with in-memory state. Please read the full comment on it in state.go before using it.

func (*InMemoryState) RewriteVolumeConfig ¶
func (s *InMemoryState) RewriteVolumeConfig(volume *Volume, newCfg *VolumeConfig) error
RewriteVolumeConfig rewrites a volume's configuration. This function is DANGEROUS, even with in-memory state. Please read the full comment in state.go before using it.

func (*InMemoryState) SaveContainer ¶
func (s *InMemoryState) SaveContainer(ctr *Container) error
SaveContainer saves a container's state As all state is in-memory, any changes are always reflected as soon as they are made As such this is a no-op

func (*InMemoryState) SavePod ¶
func (s *InMemoryState) SavePod(pod *Pod) error
SavePod updates a pod in the state This is a no-op at there is no backing store

func (*InMemoryState) SaveVolume ¶
func (s *InMemoryState) SaveVolume(volume *Volume) error
SaveVolume saves a volume's state to the database. For the in-memory state, this is a no-op.

func (*InMemoryState) SetNamespace ¶
func (s *InMemoryState) SetNamespace(ns string) error
SetNamespace sets the namespace for container and pod retrieval.

func (*InMemoryState) UpdateContainer ¶
func (s *InMemoryState) UpdateContainer(ctr *Container) error
UpdateContainer updates a container's state As all state is in-memory, no update will be required As such this is a no-op

func (*InMemoryState) UpdatePod ¶
func (s *InMemoryState) UpdatePod(pod *Pod) error
UpdatePod updates a pod in the state This is a no-op as there is no backing store

func (*InMemoryState) UpdateVolume ¶
func (s *InMemoryState) UpdateVolume(volume *Volume) error
UpdateVolume updates a volume from the database. For the in-memory state, this is a no-op.

func (*InMemoryState) ValidateDBConfig ¶
func (s *InMemoryState) ValidateDBConfig(runtime *Runtime) error
ValidateDBConfig is not implemented for the in-memory state. Since we do nothing just return no error.

func (*InMemoryState) Volume ¶
func (s *InMemoryState) Volume(name string) (*Volume, error)
Volume retrieves a volume from its full name

func (*InMemoryState) VolumeInUse ¶
func (s *InMemoryState) VolumeInUse(volume *Volume) ([]string, error)
VolumeInUse checks if the given volume is being used by at least one container

type InfraContainerConfig ¶
type InfraContainerConfig struct {
	ConmonPidFile      string               `json:"conmonPidFile"`
	HasInfraContainer  bool                 `json:"makeInfraContainer"`
	HostNetwork        bool                 `json:"infraHostNetwork,omitempty"`
	PortBindings       []ocicni.PortMapping `json:"infraPortBindings"`
	StaticIP           net.IP               `json:"staticIP,omitempty"`
	StaticMAC          net.HardwareAddr     `json:"staticMAC,omitempty"`
	UseImageResolvConf bool                 `json:"useImageResolvConf,omitempty"`
	DNSServer          []string             `json:"dnsServer,omitempty"`
	DNSSearch          []string             `json:"dnsSearch,omitempty"`
	DNSOption          []string             `json:"dnsOption,omitempty"`
	UseImageHosts      bool                 `json:"useImageHosts,omitempty"`
	HostAdd            []string             `json:"hostsAdd,omitempty"`
	Networks           []string             `json:"networks,omitempty"`
	ExitCommand        []string             `json:"exitCommand,omitempty"`
}
InfraContainerConfig is the configuration for the pod's infra container. Generally speaking, these are equivalent to container configuration options you will find in container_config.go (and even named identically), save for HasInfraContainer (which determines if an infra container is even created - if it is false, no other options in this struct will be used) and HostNetwork (this involves the created OCI spec, and as such is not represented directly in container_config.go). Generally speaking, aside from those two exceptions, these options will set the equivalent field in the container's configuration.

type InspectVolumeData ¶
type InspectVolumeData struct {
	// Name is the name of the volume.
	Name string `json:"Name"`
	// Driver is the driver used to create the volume.
	// This will be properly implemented in a future version.
	Driver string `json:"Driver"`
	// Mountpoint is the path on the host where the volume is mounted.
	Mountpoint string `json:"Mountpoint"`
	// CreatedAt is the date and time the volume was created at. This is not
	// stored for older Libpod volumes; if so, it will be omitted.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// Status is presently unused and provided only for Docker compatibility.
	// In the future it will be used to return information on the volume's
	// current state.
	Status map[string]string `json:"Status,omitempty"`
	// Labels includes the volume's configured labels, key:value pairs that
	// can be passed during volume creation to provide information for third
	// party tools.
	Labels map[string]string `json:"Labels"`
	// Scope is unused and provided solely for Docker compatibility. It is
	// unconditionally set to "local".
	Scope string `json:"Scope"`
	// Options is a set of options that were used when creating the volume.
	// It is presently not used.
	Options map[string]string `json:"Options"`
	// UID is the UID that the volume was created with.
	UID int `json:"UID,omitempty"`
	// GID is the GID that the volume was created with.
	GID int `json:"GID,omitempty"`
	// Anonymous indicates that the volume was created as an anonymous
	// volume for a specific container, and will be be removed when any
	// container using it is removed.
	Anonymous bool `json:"Anonymous,omitempty"`
}
InspectVolumeData is the output of Inspect() on a volume. It is matched to the format of 'docker volume inspect'.

type LinuxNS ¶
type LinuxNS int
LinuxNS represents a Linux namespace

const (
	// InvalidNS is an invalid namespace
	InvalidNS LinuxNS = iota
	// IPCNS is the IPC namespace
	IPCNS LinuxNS = iota
	// MountNS is the mount namespace
	MountNS LinuxNS = iota
	// NetNS is the network namespace
	NetNS LinuxNS = iota
	// PIDNS is the PID namespace
	PIDNS LinuxNS = iota
	// UserNS is the user namespace
	UserNS LinuxNS = iota
	// UTSNS is the UTS namespace
	UTSNS LinuxNS = iota
	// CgroupNS is the CGroup namespace
	CgroupNS LinuxNS = iota
)
func (LinuxNS) String ¶
func (ns LinuxNS) String() string
String returns a string representation of a Linux namespace It is guaranteed to be the name of the namespace in /proc for valid ns types

type MissingRuntime ¶
type MissingRuntime struct {
	// contains filtered or unexported fields
}
MissingRuntime is used when the OCI runtime requested by the container is missing (not installed or not in the configuration file).

func (*MissingRuntime) AttachResize ¶
func (r *MissingRuntime) AttachResize(ctr *Container, newSize remotecommand.TerminalSize) error
AttachResize is not available as the runtime is missing

func (*MissingRuntime) AttachSocketPath ¶
func (r *MissingRuntime) AttachSocketPath(ctr *Container) (string, error)
AttachSocketPath does not work as there is no runtime to attach to. (Theoretically we could follow ExitFilePath but there is no guarantee the container is running and thus has an attach socket...)

func (*MissingRuntime) CheckConmonRunning ¶
func (r *MissingRuntime) CheckConmonRunning(ctr *Container) (bool, error)
CheckConmonRunning is not available as the runtime is missing

func (*MissingRuntime) CheckpointContainer ¶
func (r *MissingRuntime) CheckpointContainer(ctr *Container, options ContainerCheckpointOptions) error
CheckpointContainer is not available as the runtime is missing

func (*MissingRuntime) CreateContainer ¶
func (r *MissingRuntime) CreateContainer(ctr *Container, restoreOptions *ContainerCheckpointOptions) error
CreateContainer is not available as the runtime is missing

func (*MissingRuntime) DeleteContainer ¶
func (r *MissingRuntime) DeleteContainer(ctr *Container) error
DeleteContainer is not available as the runtime is missing

func (*MissingRuntime) ExecAttachResize ¶
func (r *MissingRuntime) ExecAttachResize(ctr *Container, sessionID string, newSize remotecommand.TerminalSize) error
ExecAttachResize is not available as the runtime is missing.

func (*MissingRuntime) ExecAttachSocketPath ¶
func (r *MissingRuntime) ExecAttachSocketPath(ctr *Container, sessionID string) (string, error)
ExecAttachSocketPath does not work as there is no runtime to attach to. (Again, we could follow ExitFilePath, but no guarantee there is an existing and running exec session)

func (*MissingRuntime) ExecContainer ¶
func (r *MissingRuntime) ExecContainer(ctr *Container, sessionID string, options *ExecOptions, streams *define.AttachStreams) (int, chan error, error)
ExecContainer is not available as the runtime is missing

func (*MissingRuntime) ExecContainerCleanup ¶
func (r *MissingRuntime) ExecContainerCleanup(ctr *Container, sessionID string) error
ExecContainerCleanup is not available as the runtime is missing

func (*MissingRuntime) ExecContainerDetached ¶
func (r *MissingRuntime) ExecContainerDetached(ctr *Container, sessionID string, options *ExecOptions, stdin bool) (int, error)
ExecContainerDetached is not available as the runtime is missing

func (*MissingRuntime) ExecContainerHTTP ¶
func (r *MissingRuntime) ExecContainerHTTP(ctr *Container, sessionID string, options *ExecOptions, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, cancel <-chan bool) (int, chan error, error)
ExecContainerHTTP is not available as the runtime is missing

func (*MissingRuntime) ExecStopContainer ¶
func (r *MissingRuntime) ExecStopContainer(ctr *Container, sessionID string, timeout uint) error
ExecStopContainer is not available as the runtime is missing. TODO: We can also investigate using unix.Kill() on the PID of the exec session here if we want to make stopping containers possible. Won't be perfect, though.

func (*MissingRuntime) ExecUpdateStatus ¶
func (r *MissingRuntime) ExecUpdateStatus(ctr *Container, sessionID string) (bool, error)
ExecUpdateStatus is not available as the runtime is missing.

func (*MissingRuntime) ExitFilePath ¶
func (r *MissingRuntime) ExitFilePath(ctr *Container) (string, error)
ExitFilePath returns the exit file path for containers. Here, we mimic what ConmonOCIRuntime does, because there is a chance that the container in question is still running happily (config file modified to remove a runtime, for example). We can't find the runtime to do anything to the container, but Conmon should still place an exit file for it.

func (*MissingRuntime) HTTPAttach ¶
func (r *MissingRuntime) HTTPAttach(ctr *Container, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, detachKeys *string, cancel <-chan bool) error
HTTPAttach is not available as the runtime is missing

func (*MissingRuntime) KillContainer ¶
func (r *MissingRuntime) KillContainer(ctr *Container, signal uint, all bool) error
KillContainer is not available as the runtime is missing TODO: We could attempt to unix.Kill() the PID as recorded in the state if we really want to smooth things out? Won't be perfect, but if the container has a PID namespace it could be enough?

func (*MissingRuntime) Name ¶
func (r *MissingRuntime) Name() string
Name is the name of the missing runtime

func (*MissingRuntime) Path ¶
func (r *MissingRuntime) Path() string
Path is not available as the runtime is missing

func (*MissingRuntime) PauseContainer ¶
func (r *MissingRuntime) PauseContainer(ctr *Container) error
PauseContainer is not available as the runtime is missing

func (*MissingRuntime) RuntimeInfo ¶
func (r *MissingRuntime) RuntimeInfo() (*define.ConmonInfo, *define.OCIRuntimeInfo, error)
RuntimeInfo returns information on the missing runtime

func (*MissingRuntime) StartContainer ¶
func (r *MissingRuntime) StartContainer(ctr *Container) error
StartContainer is not available as the runtime is missing

func (*MissingRuntime) StopContainer ¶
func (r *MissingRuntime) StopContainer(ctr *Container, timeout uint, all bool) error
StopContainer is not available as the runtime is missing

func (*MissingRuntime) SupportsCheckpoint ¶
func (r *MissingRuntime) SupportsCheckpoint() bool
SupportsCheckpoint returns false as checkpointing requires a working runtime

func (*MissingRuntime) SupportsJSONErrors ¶
func (r *MissingRuntime) SupportsJSONErrors() bool
SupportsJSONErrors returns false as there is no runtime to give errors

func (*MissingRuntime) SupportsKVM ¶
func (r *MissingRuntime) SupportsKVM() bool
SupportsKVM checks if the OCI runtime supports running containers without KVM separation

func (*MissingRuntime) SupportsNoCgroups ¶
func (r *MissingRuntime) SupportsNoCgroups() bool
SupportsNoCgroups returns false as there is no runtime to create containers

func (*MissingRuntime) UnpauseContainer ¶
func (r *MissingRuntime) UnpauseContainer(ctr *Container) error
UnpauseContainer is not available as the runtime is missing

func (*MissingRuntime) UpdateContainerStatus ¶
func (r *MissingRuntime) UpdateContainerStatus(ctr *Container) error
UpdateContainerStatus is not available as the runtime is missing

type OCIRuntime ¶
type OCIRuntime interface {
	// Name returns the name of the runtime.
	Name() string
	// Path returns the path to the runtime executable.
	Path() string

	// CreateContainer creates the container in the OCI runtime.
	CreateContainer(ctr *Container, restoreOptions *ContainerCheckpointOptions) error
	// UpdateContainerStatus updates the status of the given container.
	UpdateContainerStatus(ctr *Container) error
	// StartContainer starts the given container.
	StartContainer(ctr *Container) error
	// KillContainer sends the given signal to the given container.
	// If all is set, all processes in the container will be signalled;
	// otherwise, only init will be signalled.
	KillContainer(ctr *Container, signal uint, all bool) error
	// StopContainer stops the given container.
	// The container's stop signal (or SIGTERM if unspecified) will be sent
	// first.
	// After the given timeout, SIGKILL will be sent.
	// If the given timeout is 0, SIGKILL will be sent immediately, and the
	// stop signal will be omitted.
	// If all is set, we will attempt to use the --all flag will `kill` in
	// the OCI runtime to kill all processes in the container, including
	// exec sessions. This is only supported if the container has cgroups.
	StopContainer(ctr *Container, timeout uint, all bool) error
	// DeleteContainer deletes the given container from the OCI runtime.
	DeleteContainer(ctr *Container) error
	// PauseContainer pauses the given container.
	PauseContainer(ctr *Container) error
	// UnpauseContainer unpauses the given container.
	UnpauseContainer(ctr *Container) error

	// HTTPAttach performs an attach intended to be transported over HTTP.
	// For terminal attach, the container's output will be directly streamed
	// to output; otherwise, STDOUT and STDERR will be multiplexed, with
	// a header prepended as follows: 1-byte STREAM (0, 1, 2 for STDIN,
	// STDOUT, STDERR), 3 null (0x00) bytes, 4-byte big endian length.
	// If a cancel channel is provided, it can be used to asynchronously
	// termninate the attach session. Detach keys, if given, will also cause
	// the attach session to be terminated if provided via the STDIN
	// channel. If they are not provided, the default detach keys will be
	// used instead. Detach keys of "" will disable detaching via keyboard.
	// The streams parameter will determine which streams to forward to the
	// client.
	HTTPAttach(ctr *Container, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, detachKeys *string, cancel <-chan bool) error
	// AttachResize resizes the terminal in use by the given container.
	AttachResize(ctr *Container, newSize remotecommand.TerminalSize) error

	// ExecContainer executes a command in a running container.
	// Returns an int (PID of exec session), error channel (errors from
	// attach), and error (errors that occurred attempting to start the exec
	// session). This returns once the exec session is running - not once it
	// has completed, as one might expect. The attach session will remain
	// running, in a goroutine that will return via the chan error in the
	// return signature.
	ExecContainer(ctr *Container, sessionID string, options *ExecOptions, streams *define.AttachStreams) (int, chan error, error)
	// ExecContainerHTTP executes a command in a running container and
	// attaches its standard streams to a provided hijacked HTTP session.
	// Maintains the same invariants as ExecContainer (returns on session
	// start, with a goroutine running in the background to handle attach).
	// The HTTP attach itself maintains the same invariants as HTTPAttach.
	ExecContainerHTTP(ctr *Container, sessionID string, options *ExecOptions, httpConn net.Conn, httpBuf *bufio.ReadWriter, streams *HTTPAttachStreams, cancel <-chan bool) (int, chan error, error)
	// ExecContainerDetached executes a command in a running container, but
	// does not attach to it. Returns the PID of the exec session and an
	// error (if starting the exec session failed)
	ExecContainerDetached(ctr *Container, sessionID string, options *ExecOptions, stdin bool) (int, error)
	// ExecAttachResize resizes the terminal of a running exec session. Only
	// allowed with sessions that were created with a TTY.
	ExecAttachResize(ctr *Container, sessionID string, newSize remotecommand.TerminalSize) error
	// ExecStopContainer stops a given exec session in a running container.
	// SIGTERM with be sent initially, then SIGKILL after the given timeout.
	// If timeout is 0, SIGKILL will be sent immediately, and SIGTERM will
	// be omitted.
	ExecStopContainer(ctr *Container, sessionID string, timeout uint) error
	// ExecUpdateStatus checks the status of a given exec session.
	// Returns true if the session is still running, or false if it exited.
	ExecUpdateStatus(ctr *Container, sessionID string) (bool, error)
	// ExecContainerCleanup cleans up after an exec session exits.
	// It removes any files left by the exec session that are no longer
	// needed, including the attach socket.
	ExecContainerCleanup(ctr *Container, sessionID string) error

	// CheckpointContainer checkpoints the given container.
	// Some OCI runtimes may not support this - if SupportsCheckpoint()
	// returns false, this is not implemented, and will always return an
	// error.
	CheckpointContainer(ctr *Container, options ContainerCheckpointOptions) error

	// CheckConmonRunning verifies that the given container's Conmon
	// instance is still running. Runtimes without Conmon, or systems where
	// the PID of conmon is not available, should mock this as True.
	// True indicates that Conmon for the instance is running, False
	// indicates it is not.
	CheckConmonRunning(ctr *Container) (bool, error)

	// SupportsCheckpoint returns whether this OCI runtime
	// implementation supports the CheckpointContainer() operation.
	SupportsCheckpoint() bool
	// SupportsJSONErrors is whether the runtime can return JSON-formatted
	// error messages.
	SupportsJSONErrors() bool
	// SupportsNoCgroups is whether the runtime supports running containers
	// without cgroups.
	SupportsNoCgroups() bool
	// SupportsKVM os whether the OCI runtime supports running containers
	// without KVM separation
	SupportsKVM() bool

	// AttachSocketPath is the path to the socket to attach to a given
	// container.
	// TODO: If we move Attach code in here, this should be made internal.
	// We don't want to force all runtimes to share the same attach
	// implementation.
	AttachSocketPath(ctr *Container) (string, error)
	// ExecAttachSocketPath is the path to the socket to attach to a given
	// exec session in the given container.
	// TODO: Probably should be made internal.
	ExecAttachSocketPath(ctr *Container, sessionID string) (string, error)
	// ExitFilePath is the path to a container's exit file.
	// All runtime implementations must create an exit file when containers
	// exit, containing the exit code of the container (as a string).
	// This is the path to that file for a given container.
	ExitFilePath(ctr *Container) (string, error)

	// RuntimeInfo returns verbose information about the runtime.
	RuntimeInfo() (*define.ConmonInfo, *define.OCIRuntimeInfo, error)
}
OCIRuntime is an implementation of an OCI runtime. The OCI runtime implementation is expected to be a fairly thin wrapper around the actual runtime, and is not expected to include things like state management logic - e.g., we do not expect it to determine on its own that calling 'UnpauseContainer()' on a container that is not paused is an error. The code calling the OCIRuntime will manage this. TODO: May want to move the Attach() code under this umbrella. It's highly OCI runtime dependent. TODO: May want to move the conmon cleanup code here too - it depends on Conmon being in use.

type Pod ¶
type Pod struct {
	// contains filtered or unexported fields
}
Pod represents a group of containers that are managed together. Any operations on a Pod that access state must begin with a call to updatePod(). There is no guarantee that state exists in a readable state before this call, and even if it does its contents will be out of date and must be refreshed from the database. Generally, this requirement applies only to top-level functions; helpers can assume their callers handled this requirement. Generally speaking, if a function takes the pod lock and accesses any part of state, it should updatePod() immediately after locking. Pod represents a group of containers that may share namespaces

func (*Pod) AllContainers ¶
func (p *Pod) AllContainers() ([]*Container, error)
AllContainers retrieves the containers in the pod

func (*Pod) AllContainersByID ¶
func (p *Pod) AllContainersByID() ([]string, error)
AllContainersByID returns the container IDs of all the containers in the pod

func (*Pod) CgroupParent ¶
func (p *Pod) CgroupParent() string
CgroupParent returns the pod's CGroup parent

func (*Pod) CgroupPath ¶
func (p *Pod) CgroupPath() (string, error)
CgroupPath returns the path to the pod's CGroup

func (*Pod) Cleanup ¶
added in v2.0.5
func (p *Pod) Cleanup(ctx context.Context) (map[string]error, error)
Cleanup cleans up all containers within a pod that have stopped. All containers are cleaned up independently. An error with one container will not prevent other containers being cleaned up. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were cleaned up. If map is not nil, an error was encountered when working on one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were paused without error

func (*Pod) CreateCommand ¶
func (p *Pod) CreateCommand() []string
CreateCommand returns the os.Args of the process with which the pod has been created.

func (*Pod) CreatedTime ¶
func (p *Pod) CreatedTime() time.Time
CreatedTime gets the time when the pod was created

func (*Pod) GenerateForKube ¶
func (p *Pod) GenerateForKube() (*v1.Pod, []v1.ServicePort, error)
GenerateForKube takes a slice of libpod containers and generates one v1.Pod description

func (*Pod) GetPodPidInformation ¶
func (p *Pod) GetPodPidInformation(descriptors []string) ([]string, error)
GetPodPidInformation returns process-related data of all processes in the pod. The output data can be controlled via the `descriptors` argument which expects format descriptors and supports all AIXformat descriptors of ps (1) plus some additional ones to for instance inspect the set of effective capabilities. Eeach element in the returned string slice is a tab-separated string.

For more details, please refer to github.com/containers/psgo.

func (*Pod) GetPodStats ¶
func (p *Pod) GetPodStats(previousContainerStats map[string]*define.ContainerStats) (map[string]*define.ContainerStats, error)
GetPodStats returns the stats for each of its containers

func (*Pod) GetPodStatus ¶
func (p *Pod) GetPodStatus() (string, error)
GetPodStatus determines the status of the pod based on the statuses of the containers in the pod. Returns a string representation of the pod status

func (*Pod) HasContainer ¶
func (p *Pod) HasContainer(id string) (bool, error)
HasContainer checks if a container is present in the pod

func (*Pod) HasInfraContainer ¶
func (p *Pod) HasInfraContainer() bool
HasInfraContainer returns whether the pod will create an infra container

func (*Pod) Hostname ¶
func (p *Pod) Hostname() string
Hostname returns the hostname of the pod.

func (*Pod) ID ¶
func (p *Pod) ID() string
ID retrieves the pod's ID

func (*Pod) InfraContainer ¶
func (p *Pod) InfraContainer() (*Container, error)
InfraContainer returns the infra container.

func (*Pod) InfraContainerID ¶
func (p *Pod) InfraContainerID() (string, error)
InfraContainerID returns the infra container ID for a pod. If the container returned is "", the pod has no infra container.

func (*Pod) Inspect ¶
func (p *Pod) Inspect() (*define.InspectPodData, error)
Inspect returns a PodInspect struct to describe the pod.

func (*Pod) Kill ¶
func (p *Pod) Kill(signal uint) (map[string]error, error)
Kill sends a signal to all running containers within a pod. Signals will only be sent to running containers. Containers that are not running will be ignored. All signals are sent independently, and sending will continue even if some containers encounter errors. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were signalled. If map is not nil, an error was encountered when signalling one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were signalled successfully.

func (*Pod) Labels ¶
func (p *Pod) Labels() map[string]string
Labels returns the pod's labels

func (*Pod) Name ¶
func (p *Pod) Name() string
Name retrieves the pod's name

func (*Pod) Namespace ¶
func (p *Pod) Namespace() string
Namespace returns the pod's libpod namespace. Namespaces are used to logically separate containers and pods in the state.

func (*Pod) Pause ¶
func (p *Pod) Pause() (map[string]error, error)
Pause pauses all containers within a pod that are running. Only running containers will be paused. Paused, stopped, or created containers will be ignored. All containers are paused independently. An error pausing one container will not prevent other containers being paused. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were paused. If map is not nil, an error was encountered when pausing one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were paused without error

func (*Pod) Restart ¶
func (p *Pod) Restart(ctx context.Context) (map[string]error, error)
Restart restarts all containers within a pod that are not paused or in an error state. It combines the effects of Stop() and Start() on a container Each container will use its own stop timeout. All containers are started independently, in order dictated by their dependencies. An error restarting one container will not prevent other containers being restarted. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were restarted. If map is not nil, an error was encountered when restarting one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were restarted without error.

func (*Pod) SharesCgroup ¶
func (p *Pod) SharesCgroup() bool
SharesCgroup returns whether containers in the pod will default to this pod's cgroup instead of the default libpod parent

func (*Pod) SharesIPC ¶
func (p *Pod) SharesIPC() bool
SharesIPC returns whether containers in pod default to use IPC namespace of first container in pod

func (*Pod) SharesMount ¶
func (p *Pod) SharesMount() bool
SharesMount returns whether containers in pod default to use PID namespace of first container in pod

func (*Pod) SharesNamespaces ¶
func (p *Pod) SharesNamespaces() bool
SharesNamespaces checks if the pod has any kernel namespaces set as shared. An infra container will not be created if no kernel namespaces are shared.

func (*Pod) SharesNet ¶
func (p *Pod) SharesNet() bool
SharesNet returns whether containers in pod default to use network namespace of first container in pod

func (*Pod) SharesPID ¶
func (p *Pod) SharesPID() bool
SharesPID returns whether containers in pod default to use PID namespace of first container in pod

func (*Pod) SharesUTS ¶
func (p *Pod) SharesUTS() bool
SharesUTS returns whether containers in pod default to use UTS namespace of first container in pod

func (*Pod) SharesUser ¶
func (p *Pod) SharesUser() bool
SharesUser returns whether containers in pod default to use user namespace of first container in pod

func (*Pod) Start ¶
func (p *Pod) Start(ctx context.Context) (map[string]error, error)
Start starts all containers within a pod. It combines the effects of Init() and Start() on a container. If a container has already been initialized it will be started, otherwise it will be initialized then started. Containers that are already running or have been paused are ignored All containers are started independently, in order dictated by their dependencies. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were started. If map is not nil, an error was encountered when starting one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were started successfully.

func (*Pod) Status ¶
func (p *Pod) Status() (map[string]define.ContainerStatus, error)
Status gets the status of all containers in the pod. Returns a map of Container ID to Container Status.

func (*Pod) Stop ¶
func (p *Pod) Stop(ctx context.Context, cleanup bool) (map[string]error, error)
Stop stops all containers within a pod without a timeout. It assumes -1 for a timeout.

func (*Pod) StopWithTimeout ¶
func (p *Pod) StopWithTimeout(ctx context.Context, cleanup bool, timeout int) (map[string]error, error)
StopWithTimeout stops all containers within a pod that are not already stopped Each container will use its own stop timeout. Only running containers will be stopped. Paused, stopped, or created containers will be ignored. If cleanup is true, mounts and network namespaces will be cleaned up after the container is stopped. All containers are stopped independently. An error stopping one container will not prevent other containers being stopped. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were stopped. If map is not nil, an error was encountered when stopping one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were stopped without error.

func (*Pod) Unpause ¶
func (p *Pod) Unpause() (map[string]error, error)
Unpause unpauses all containers within a pod that are running. Only paused containers will be unpaused. Running, stopped, or created containers will be ignored. All containers are unpaused independently. An error unpausing one container will not prevent other containers being unpaused. An error and a map[string]error are returned. If the error is not nil and the map is nil, an error was encountered before any containers were unpaused. If map is not nil, an error was encountered when unpausing one or more containers. The container ID is mapped to the error encountered. The error is set to ErrPodPartialFail. If both error and the map are nil, all containers were unpaused without error.

type PodConfig ¶
type PodConfig struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	// Namespace the pod is in
	Namespace string `json:"namespace,omitempty"`

	Hostname string `json:"hostname,omitempty"`

	// Labels contains labels applied to the pod
	Labels map[string]string `json:"labels"`
	// CgroupParent contains the pod's CGroup parent
	CgroupParent string `json:"cgroupParent"`
	// UsePodCgroup indicates whether the pod will create its own CGroup and
	// join containers to it.
	// If true, all containers joined to the pod will use the pod cgroup as
	// their cgroup parent, and cannot set a different cgroup parent
	UsePodCgroup bool `json:"sharesCgroup,omitempty"`

	// The following UsePod{kernelNamespace} indicate whether the containers
	// in the pod will inherit the namespace from the first container in the pod.
	UsePodPID      bool `json:"sharesPid,omitempty"`
	UsePodIPC      bool `json:"sharesIpc,omitempty"`
	UsePodNet      bool `json:"sharesNet,omitempty"`
	UsePodMount    bool `json:"sharesMnt,omitempty"`
	UsePodUser     bool `json:"sharesUser,omitempty"`
	UsePodUTS      bool `json:"sharesUts,omitempty"`
	UsePodCgroupNS bool `json:"sharesCgroupNS,omitempty"`

	InfraContainer *InfraContainerConfig `json:"infraConfig"`

	// Time pod was created
	CreatedTime time.Time `json:"created"`

	// CreateCommand is the full command plus arguments of the process the
	// container has been created with.
	CreateCommand []string `json:"CreateCommand,omitempty"`

	// ID of the pod's lock
	LockID uint32 `json:"lockID"`
}
PodConfig represents a pod's static configuration

type PodContainerStats ¶
type PodContainerStats struct {
	Pod            *Pod
	ContainerStats map[string]*define.ContainerStats
}
PodContainerStats is an organization struct for pods and their containers

type PodCreateOption ¶
type PodCreateOption func(*Pod) error
A PodCreateOption is a functional option which alters the Pod created by NewPod

func WithInfraConmonPidFile ¶
func WithInfraConmonPidFile(path string) PodCreateOption
WithInfraConmonPidFile sets the path to a custom conmon PID file for the infra container.

func WithInfraContainer ¶
func WithInfraContainer() PodCreateOption
WithInfraContainer tells the pod to create a pause container

func WithInfraContainerPorts ¶
func WithInfraContainerPorts(bindings []ocicni.PortMapping) PodCreateOption
WithInfraContainerPorts tells the pod to add port bindings to the pause container

func WithPodCgroup ¶
func WithPodCgroup() PodCreateOption
WithPodCgroup tells containers in this pod to use the cgroup namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added.

func WithPodCgroupParent ¶
func WithPodCgroupParent(path string) PodCreateOption
WithPodCgroupParent sets the Cgroup Parent of the pod.

func WithPodCgroups ¶
func WithPodCgroups() PodCreateOption
WithPodCgroups tells containers in this pod to use the cgroup created for this pod. This can still be overridden at the container level by explicitly specifying a CGroup parent.

func WithPodCreateCommand ¶
func WithPodCreateCommand(createCmd []string) PodCreateOption
WithPodCreateCommand adds the full command plus arguments of the current process to the pod config.

func WithPodDNS ¶
func WithPodDNS(dnsServer []string) PodCreateOption
WithPodDNS sets the DNS Servers for a pod.

func WithPodDNSOption ¶
func WithPodDNSOption(dnsOption []string) PodCreateOption
WithPodDNSOption sets DNS Options for a pod.

func WithPodDNSSearch ¶
func WithPodDNSSearch(dnsSearch []string) PodCreateOption
WithPodDNSSearch sets the DNS Search domains for a pod.

func WithPodHostNetwork ¶
func WithPodHostNetwork() PodCreateOption
WithPodHostNetwork tells the pod to use the host's network namespace.

func WithPodHostname ¶
func WithPodHostname(hostname string) PodCreateOption
WithPodHostname sets the hostname of the pod.

func WithPodHosts ¶
func WithPodHosts(hosts []string) PodCreateOption
WithPodHosts adds additional entries to the pod's /etc/hosts

func WithPodIPC ¶
func WithPodIPC() PodCreateOption
WithPodIPC tells containers in this pod to use the ipc namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added.

func WithPodInfraExitCommand ¶
added in v2.0.5
func WithPodInfraExitCommand(exitCmd []string) PodCreateOption
WithPodInfraExitCommand sets an exit command for the pod's infra container. Semantics are identical to WithExitCommand() above - the ID of the container will be appended to the end of the provided command (note that this will specifically be the ID of the infra container *and not the pod's id*.

func WithPodLabels ¶
func WithPodLabels(labels map[string]string) PodCreateOption
WithPodLabels sets the labels of a pod.

func WithPodMount ¶
func WithPodMount() PodCreateOption
WithPodMount tells containers in this pod to use the mount namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added. TODO implement WithMountNSFrom, so WithMountNsFromPod functions properly Then this option can be added on the pod level

func WithPodName ¶
func WithPodName(name string) PodCreateOption
WithPodName sets the name of the pod.

func WithPodNamespace ¶
func WithPodNamespace(ns string) PodCreateOption
WithPodNamespace sets the namespace for the created pod. Namespaces are used to create separate views of Podman's state - runtimes can join a specific namespace and see only containers and pods in that namespace. Empty string namespaces are allowed, and correspond to a lack of namespace. Containers must belong to the same namespace as the pod they join.

func WithPodNet ¶
func WithPodNet() PodCreateOption
WithPodNet tells containers in this pod to use the network namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added.

func WithPodNetworks ¶
func WithPodNetworks(networks []string) PodCreateOption
WithPodNetworks sets additional CNI networks for the pod to join.

func WithPodPID ¶
func WithPodPID() PodCreateOption
WithPodPID tells containers in this pod to use the pid namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added.

func WithPodStaticIP ¶
func WithPodStaticIP(ip net.IP) PodCreateOption
WithPodStaticIP sets a static IP for the pod.

func WithPodStaticMAC ¶
func WithPodStaticMAC(mac net.HardwareAddr) PodCreateOption
WithPodStaticMAC sets a static MAC address for the pod.

func WithPodUTS ¶
func WithPodUTS() PodCreateOption
WithPodUTS tells containers in this pod to use the uts namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added.

func WithPodUseImageHosts ¶
func WithPodUseImageHosts() PodCreateOption
WithPodUseImageHosts tells the pod not to create /etc/hosts and instead to use the one provided by the image.

func WithPodUseImageResolvConf ¶
func WithPodUseImageResolvConf() PodCreateOption
WithPodUseImageResolvConf sets a pod to use an image's resolv.conf and not create its own.

func WithPodUser ¶
func WithPodUser() PodCreateOption
WithPodUser tells containers in this pod to use the user namespace created for this pod. Containers in a pod will inherit the kernel namespaces from the first container added. TODO implement WithUserNSFrom, so WithUserNsFromPod functions properly Then this option can be added on the pod level

type PodFilter ¶
type PodFilter func(*Pod) bool
PodFilter is a function to determine whether a pod is included in command output. Pods to be outputted are tested using the function. A true return will include the pod, a false return will exclude it.

type Runtime ¶
type Runtime struct {
	// contains filtered or unexported fields
}
Runtime is the core libpod runtime

func NewRuntime ¶
func NewRuntime(ctx context.Context, options ...RuntimeOption) (*Runtime, error)
NewRuntime creates a new container runtime Options can be passed to override the default configuration for the runtime

func NewRuntimeFromConfig ¶
func NewRuntimeFromConfig(ctx context.Context, userConfig *config.Config, options ...RuntimeOption) (*Runtime, error)
NewRuntimeFromConfig creates a new container runtime using the given configuration file for its default configuration. Passed RuntimeOption functions can be used to mutate this configuration further. An error will be returned if the configuration file at the given path does not exist or cannot be loaded

func (*Runtime) ApplyDiffTarStream ¶
func (r *Runtime) ApplyDiffTarStream(to string, diff io.Reader) error
ApplyDiffTarStream applies the changes stored in 'diff' to the layer 'to'

func (*Runtime) Build ¶
func (r *Runtime) Build(ctx context.Context, options imagebuildah.BuildOptions, dockerfiles ...string) (string, reference.Canonical, error)
Build adds the runtime to the imagebuildah call

func (*Runtime) DeferredShutdown ¶
func (r *Runtime) DeferredShutdown(force bool)
DeferredShutdown shuts down the runtime without exposing any errors. This is only meant to be used when the runtime is being shutdown within a defer statement; else use Shutdown

func (*Runtime) EnableLabeling ¶
func (r *Runtime) EnableLabeling() bool
func (*Runtime) Events ¶
func (r *Runtime) Events(ctx context.Context, options events.ReadOptions) error
Events is a wrapper function for everyone to begin tailing the events log with options

func (*Runtime) EvictContainer ¶
func (r *Runtime) EvictContainer(ctx context.Context, idOrName string, removeVolume bool) (string, error)
EvictContainer removes the given container partial or full ID or name, and returns the full ID of the evicted container and any error encountered. It should be used to remove a container when obtaining a Container struct pointer has failed. Running container will not be stopped. If removeVolume is specified, named volumes used by the container will be removed also if and only if the container is the sole user.

func (*Runtime) GetAllContainers ¶
func (r *Runtime) GetAllContainers() ([]*Container, error)
GetAllContainers is a helper function for GetContainers

func (*Runtime) GetAllPods ¶
func (r *Runtime) GetAllPods() ([]*Pod, error)
GetAllPods retrieves all pods

func (*Runtime) GetAllVolumes ¶
func (r *Runtime) GetAllVolumes() ([]*Volume, error)
GetAllVolumes retrieves all the volumes

func (*Runtime) GetConfig ¶
func (r *Runtime) GetConfig() (*config.Config, error)
GetConfig returns a copy of the configuration used by the runtime

func (*Runtime) GetContainer ¶
func (r *Runtime) GetContainer(id string) (*Container, error)
GetContainer retrieves a container by its ID

func (*Runtime) GetContainers ¶
func (r *Runtime) GetContainers(filters ...ContainerFilter) ([]*Container, error)
GetContainers retrieves all containers from the state Filters can be provided which will determine what containers are included in the output. Multiple filters are handled by ANDing their output, so only containers matching all filters are returned

func (*Runtime) GetContainersByList ¶
func (r *Runtime) GetContainersByList(containers []string) ([]*Container, error)
GetContainersByList is a helper function for GetContainers which takes a []string of container IDs or names

func (*Runtime) GetDiff ¶
func (r *Runtime) GetDiff(from, to string) ([]archive.Change, error)
GetDiff returns the differences between the two images, layers, or containers

func (*Runtime) GetEvents ¶
func (r *Runtime) GetEvents(ctx context.Context, filters []string) ([]*events.Event, error)
GetEvents reads the event log and returns events based on input filters

func (*Runtime) GetExecSessionContainer ¶
func (r *Runtime) GetExecSessionContainer(id string) (*Container, error)
GetExecSessionContainer gets the container that a given exec session ID is attached to.

func (*Runtime) GetHostDistributionInfo ¶
func (r *Runtime) GetHostDistributionInfo() define.DistributionInfo
GetHostDistributionInfo returns a map containing the host's distribution and version

func (*Runtime) GetLastContainerEvent ¶
func (r *Runtime) GetLastContainerEvent(ctx context.Context, nameOrID string, containerEvent events.Status) (*events.Event, error)
GetLastContainerEvent takes a container name or ID and an event status and returns the last occurrence of the container event

func (*Runtime) GetLatestContainer ¶
func (r *Runtime) GetLatestContainer() (*Container, error)
GetLatestContainer returns a container object of the latest created container.

func (*Runtime) GetLatestPod ¶
func (r *Runtime) GetLatestPod() (*Pod, error)
GetLatestPod returns a pod object of the latest created pod.

func (*Runtime) GetName ¶
added in v2.0.5
func (r *Runtime) GetName(id string) (string, error)
GetName retrieves the name associated with a given full ID. This works for both containers and pods, and does not distinguish between the two. If the given ID does not correspond to any existing Pod or Container, ErrNoSuchCtr is returned.

func (*Runtime) GetOCIRuntimePath ¶
func (r *Runtime) GetOCIRuntimePath() string
GetOCIRuntimePath retrieves the path of the default OCI runtime.

func (*Runtime) GetPod ¶
func (r *Runtime) GetPod(id string) (*Pod, error)
GetPod retrieves a pod by its ID

func (*Runtime) GetRunningContainers ¶
func (r *Runtime) GetRunningContainers() ([]*Container, error)
GetRunningContainers is a helper function for GetContainers

func (*Runtime) GetRunningPods ¶
func (r *Runtime) GetRunningPods() ([]*Pod, error)
GetRunningPods returns an array of running pods

func (*Runtime) GetStore ¶
func (r *Runtime) GetStore() storage.Store
GetStore returns the runtime stores

func (*Runtime) GetVolume ¶
func (r *Runtime) GetVolume(name string) (*Volume, error)
GetVolume retrieves a volume given its full name.

func (*Runtime) HasContainer ¶
func (r *Runtime) HasContainer(id string) (bool, error)
HasContainer checks if a container with the given ID is present

func (*Runtime) HasPod ¶
func (r *Runtime) HasPod(id string) (bool, error)
HasPod checks to see if a pod with the given ID exists

func (*Runtime) HasVolume ¶
func (r *Runtime) HasVolume(name string) (bool, error)
HasVolume checks to see if a volume with the given name exists

func (*Runtime) HealthCheck ¶
func (r *Runtime) HealthCheck(name string) (define.HealthCheckStatus, error)
HealthCheck verifies the state and validity of the healthcheck configuration on the container and then executes the healthcheck

func (*Runtime) ImageRuntime ¶
func (r *Runtime) ImageRuntime() *image.Runtime
ImageRuntime returns the imageruntime for image operations. If WithNoStore() was used, no image runtime will be available, and this function will return nil.

func (*Runtime) Import ¶
func (r *Runtime) Import(ctx context.Context, source string, reference string, changes []string, history string, quiet bool) (string, error)
Import is called as an intermediary to the image library Import

func (*Runtime) Info ¶
func (r *Runtime) Info() (*define.Info, error)
Info returns the store and host information

func (*Runtime) ListStorageContainers ¶
func (r *Runtime) ListStorageContainers() ([]*StorageContainer, error)
ListStorageContainers lists all containers visible to c/storage.

func (*Runtime) LoadImage ¶
func (r *Runtime) LoadImage(ctx context.Context, name, inputFile string, writer io.Writer, signaturePolicy string) (string, error)
LoadImage loads a container image into local storage

func (*Runtime) Log ¶
func (r *Runtime) Log(ctx context.Context, containers []*Container, options *logs.LogOptions, logChannel chan *logs.LogLine) error
Log is a runtime function that can read one or more container logs.

func (*Runtime) LookupContainer ¶
func (r *Runtime) LookupContainer(idOrName string) (*Container, error)
LookupContainer looks up a container by its name or a partial ID If a partial ID is not unique, an error will be returned

func (*Runtime) LookupPod ¶
func (r *Runtime) LookupPod(idOrName string) (*Pod, error)
LookupPod retrieves a pod by its name or a partial ID If a partial ID is not unique, an error will be returned

func (*Runtime) LookupVolume ¶
func (r *Runtime) LookupVolume(name string) (*Volume, error)
LookupVolume retrieves a volume by unambiguous partial name.

func (*Runtime) NewContainer ¶
func (r *Runtime) NewContainer(ctx context.Context, rSpec *spec.Spec, options ...CtrCreateOption) (*Container, error)
NewContainer creates a new container from a given OCI config.

func (*Runtime) NewPod ¶
func (r *Runtime) NewPod(ctx context.Context, options ...PodCreateOption) (_ *Pod, deferredErr error)
NewPod makes a new, empty pod

func (*Runtime) NewVolume ¶
func (r *Runtime) NewVolume(ctx context.Context, options ...VolumeCreateOption) (*Volume, error)
NewVolume creates a new empty volume

func (*Runtime) Pods ¶
func (r *Runtime) Pods(filters ...PodFilter) ([]*Pod, error)
Pods retrieves all pods Filters can be provided which will determine which pods are included in the output. Multiple filters are handled by ANDing their output, so only pods matching all filters are returned

func (*Runtime) PruneContainers ¶
func (r *Runtime) PruneContainers(filterFuncs []ContainerFilter) (map[string]int64, map[string]error, error)
PruneContainers removes stopped and exited containers from localstorage. A set of optional filters can be provided to be more granular.

func (*Runtime) PrunePods ¶
func (r *Runtime) PrunePods(ctx context.Context) (map[string]error, error)
PrunePods removes unused pods and their containers from local storage.

func (*Runtime) PruneVolumes ¶
func (r *Runtime) PruneVolumes(ctx context.Context) (map[string]error, error)
PruneVolumes removes unused volumes from the system

func (*Runtime) RemoveContainer ¶
func (r *Runtime) RemoveContainer(ctx context.Context, c *Container, force bool, removeVolume bool) error
RemoveContainer removes the given container If force is specified, the container will be stopped first If removeVolume is specified, named volumes used by the container will be removed also if and only if the container is the sole user Otherwise, RemoveContainer will return an error if the container is running

func (*Runtime) RemoveImage ¶
func (r *Runtime) RemoveImage(ctx context.Context, img *image.Image, force bool) (*image.ImageDeleteResponse, error)
RemoveImage deletes an image from local storage Images being used by running containers can only be removed if force=true

func (*Runtime) RemovePod ¶
func (r *Runtime) RemovePod(ctx context.Context, p *Pod, removeCtrs, force bool) error
RemovePod removes a pod If removeCtrs is specified, containers will be removed Otherwise, a pod that is not empty will return an error and not be removed If force is specified with removeCtrs, all containers will be stopped before being removed Otherwise, the pod will not be removed if any containers are running

func (*Runtime) RemoveStorageContainer ¶
func (r *Runtime) RemoveStorageContainer(idOrName string, force bool) error
RemoveStorageContainer removes a container from c/storage. The container WILL NOT be removed if it exists in libpod. Accepts ID or full name of container. If force is set, the container will be unmounted first to ensure removal.

func (*Runtime) RemoveVolume ¶
func (r *Runtime) RemoveVolume(ctx context.Context, v *Volume, force bool) error
RemoveVolume removes a volumes

func (*Runtime) Reset ¶
func (r *Runtime) Reset(ctx context.Context) error
Reset removes all storage

func (*Runtime) RestoreContainer ¶
func (r *Runtime) RestoreContainer(ctx context.Context, rSpec *spec.Spec, config *ContainerConfig) (*Container, error)
RestoreContainer re-creates a container from an imported checkpoint

func (*Runtime) Shutdown ¶
func (r *Runtime) Shutdown(force bool) error
Shutdown shuts down the runtime and associated containers and storage If force is true, containers and mounted storage will be shut down before cleaning up; if force is false, an error will be returned if there are still containers running or mounted

func (*Runtime) StorageConfig ¶
func (r *Runtime) StorageConfig() storage.StoreOptions
StorageConfig retrieves the storage options for the container runtime

func (*Runtime) SystemContext ¶
func (r *Runtime) SystemContext() *types.SystemContext
SystemContext returns the imagecontext

func (*Runtime) Volumes ¶
func (r *Runtime) Volumes(filters ...VolumeFilter) ([]*Volume, error)
Volumes retrieves all volumes Filters can be provided which will determine which volumes are included in the output. Multiple filters are handled by ANDing their output, so only volumes matching all filters are returned

func (*Runtime) WithPod ¶
func (r *Runtime) WithPod(pod *Pod) CtrCreateOption
WithPod adds the container to a pod. Containers which join a pod can only join the Linux namespaces of other containers in the same pod. Containers can only join pods in the same libpod namespace.

type RuntimeContainerMetadata ¶
type RuntimeContainerMetadata struct {
	// The provided name and the ID of the image that was used to
	// instantiate the container.
	ImageName string `json:"image-name"` // Applicable to both PodSandboxes and Containers
	ImageID   string `json:"image-id"`   // Applicable to both PodSandboxes and Containers
	// The container's name, which for an infrastructure container is usually PodName + "-infra".
	ContainerName string `json:"name"`                 // Applicable to both PodSandboxes and Containers, mandatory
	CreatedAt     int64  `json:"created-at"`           // Applicable to both PodSandboxes and Containers
	MountLabel    string `json:"mountlabel,omitempty"` // Applicable to both PodSandboxes and Containers
}
RuntimeContainerMetadata is the structure that we encode as JSON and store in the metadata field of storage.Container objects. It is used for specifying attributes containers when they are being created, and allows a container's MountLabel, and possibly other values, to be modified in one read/write cycle via calls to storageService.ContainerMetadata, RuntimeContainerMetadata.SetMountLabel, and storageService.SetContainerMetadata.

func (*RuntimeContainerMetadata) SetMountLabel ¶
func (metadata *RuntimeContainerMetadata) SetMountLabel(mountLabel string)
SetMountLabel updates the mount label held by a RuntimeContainerMetadata object.

type RuntimeOption ¶
type RuntimeOption func(*Runtime) error
A RuntimeOption is a functional option which alters the Runtime created by NewRuntime

func WithCNIConfigDir ¶
func WithCNIConfigDir(dir string) RuntimeOption
WithCNIConfigDir sets the CNI configuration directory.

func WithCNIPluginDir ¶
func WithCNIPluginDir(dir string) RuntimeOption
WithCNIPluginDir sets the CNI plugins directory.

func WithCgroupManager ¶
func WithCgroupManager(manager string) RuntimeOption
WithCgroupManager specifies the manager implementation name which is used to handle cgroups for containers. Current valid values are "cgroupfs" and "systemd".

func WithConmonEnv ¶
func WithConmonEnv(environment []string) RuntimeOption
WithConmonEnv specifies the environment variable list for the conmon process.

func WithConmonPath ¶
func WithConmonPath(path string) RuntimeOption
WithConmonPath specifies the path to the conmon binary which manages the runtime.

func WithDefaultInfraCommand ¶
func WithDefaultInfraCommand(cmd string) RuntimeOption
WithDefaultInfraCommand sets the command to run on pause container start up.

func WithDefaultInfraImage ¶
func WithDefaultInfraImage(img string) RuntimeOption
WithDefaultInfraImage sets the infra image for libpod. An infra image is used for inter-container kernel namespace sharing within a pod. Typically, an infra container is lightweight and is there to reap zombie processes within its pid namespace.

func WithDefaultMountsFile ¶
func WithDefaultMountsFile(mountsFile string) RuntimeOption
WithDefaultMountsFile sets the file to look at for default mounts (mainly secrets). Note we are not saving this in the database as it is for testing purposes only.

func WithDefaultTransport ¶
func WithDefaultTransport(defaultTransport string) RuntimeOption
WithDefaultTransport sets the default transport for retrieving images.

func WithEnableSDNotify ¶
func WithEnableSDNotify() RuntimeOption
WithEnableSDNotify sets a runtime option so we know whether to disable socket/FD listening

func WithEventsLogger ¶
func WithEventsLogger(logger string) RuntimeOption
WithEventsLogger sets the events backend to use. Currently supported values are "file" for file backend and "journald" for journald backend.

func WithHooksDir ¶
func WithHooksDir(hooksDirs ...string) RuntimeOption
WithHooksDir sets the directories to look for OCI runtime hook configuration.

func WithMaxLogSize ¶
func WithMaxLogSize(limit int64) RuntimeOption
WithMaxLogSize sets the maximum size of container logs. Positive sizes are limits in bytes, -1 is unlimited.

func WithMigrate ¶
func WithMigrate() RuntimeOption
WithMigrate instructs libpod to migrate container configurations to account for changes between Engine versions. All running containers will be stopped during a migration, then restarted after the migration is complete.

func WithMigrateRuntime ¶
func WithMigrateRuntime(requestedRuntime string) RuntimeOption
WithMigrateRuntime instructs Engine to change the default OCI runtime on all containers during a migration. This is not used if `MigrateRuntime()` is not also passed. Engine makes no promises that your containers continue to work with the new runtime - migrations between dissimilar runtimes may well break things. Use with caution.

func WithNamespace ¶
func WithNamespace(ns string) RuntimeOption
WithNamespace sets the namespace for libpod. Namespaces are used to create scopes to separate containers and pods in the state. When namespace is set, libpod will only view containers and pods in the same namespace. All containers and pods created will default to the namespace set here. A namespace of "", the empty string, is equivalent to no namespace, and all containers and pods will be visible.

func WithNetworkCmdPath ¶
func WithNetworkCmdPath(path string) RuntimeOption
WithNetworkCmdPath specifies the path to the slirp4netns binary which manages the runtime.

func WithNoPivotRoot ¶
func WithNoPivotRoot() RuntimeOption
WithNoPivotRoot sets the runtime to use MS_MOVE instead of PIVOT_ROOT when starting containers.

func WithNoStore ¶
func WithNoStore() RuntimeOption
WithNoStore sets a bool on the runtime that we do not need any containers storage.

func WithOCIRuntime ¶
func WithOCIRuntime(runtime string) RuntimeOption
WithOCIRuntime specifies an OCI runtime to use for running containers.

func WithRegistriesConf ¶
func WithRegistriesConf(path string) RuntimeOption
WithRegistriesConf configures the runtime to always use specified registries.conf for image processing.

func WithRenumber ¶
func WithRenumber() RuntimeOption
WithRenumber instructs libpod to perform a lock renumbering while initializing. This will handle migrations from early versions of libpod with file locks to newer versions with SHM locking, as well as changes in the number of configured locks.

func WithSignaturePolicy ¶
func WithSignaturePolicy(path string) RuntimeOption
WithSignaturePolicy specifies the path of a file which decides how trust is managed for images we've pulled. If this is not specified, the system default configuration will be used instead.

func WithStateType ¶
func WithStateType(storeType config.RuntimeStateStore) RuntimeOption
WithStateType sets the backing state implementation for libpod. Please note that information is not portable between backing states. As such, if this differs between two libpods running on the same system, they will not share containers, and unspecified behavior may occur.

func WithStaticDir ¶
func WithStaticDir(dir string) RuntimeOption
WithStaticDir sets the directory that static runtime files which persist across reboots will be stored.

func WithStorageConfig ¶
func WithStorageConfig(config storage.StoreOptions) RuntimeOption
WithStorageConfig uses the given configuration to set up container storage. If this is not specified, the system default configuration will be used instead.

func WithTmpDir ¶
func WithTmpDir(dir string) RuntimeOption
WithTmpDir sets the directory that temporary runtime files which are not expected to survive across reboots will be stored. This should be located on a tmpfs mount (/tmp or /var/run for example).

func WithVolumePath ¶
func WithVolumePath(volPath string) RuntimeOption
WithVolumePath sets the path under which all named volumes should be created. The path changes based on whether the user is running as root or not.

type State ¶
type State interface {
	// Close performs any pre-exit cleanup (e.g. closing database
	// connections) that may be required
	Close() error

	// Refresh clears container and pod states after a reboot
	Refresh() error

	// GetDBConfig retrieves several paths configured within the database
	// when it was created - namely, Libpod root and tmp dirs, c/storage
	// root and tmp dirs, and c/storage graph driver.
	// This is not implemented by the in-memory state, as it has no need to
	// validate runtime configuration.
	GetDBConfig() (*DBConfig, error)

	// ValidateDBConfig validates the config in the given Runtime struct
	// against paths stored in the configured database.
	// Libpod root and tmp dirs and c/storage root and tmp dirs and graph
	// driver are validated.
	// This is not implemented by the in-memory state, as it has no need to
	// validate runtime configuration that may change over multiple runs of
	// the program.
	ValidateDBConfig(runtime *Runtime) error

	// SetNamespace() sets the namespace for the store, and will determine
	// what containers are retrieved with container and pod retrieval calls.
	// A namespace of "", the empty string, acts as no namespace, and
	// containers and pods in all namespaces will be returned.
	SetNamespace(ns string) error

	// Resolve an ID into a Name. Since Podman names and IDs are globally
	// unique between Pods and Containers, the ID may belong to either a pod
	// or container. Despite this, we will always return ErrNoSuchCtr if the
	// ID does not exist.
	GetName(id string) (string, error)

	// Return a container from the database from its full ID.
	// If the container is not in the set namespace, an error will be
	// returned.
	Container(id string) (*Container, error)
	// Return a container ID from the database by full or partial ID or full
	// name.
	LookupContainerID(idOrName string) (string, error)
	// Return a container from the database by full or partial ID or full
	// name.
	// Containers not in the set namespace will be ignored.
	LookupContainer(idOrName string) (*Container, error)
	// Check if a container with the given full ID exists in the database.
	// If the container exists but is not in the set namespace, false will
	// be returned.
	HasContainer(id string) (bool, error)
	// Adds container to state.
	// The container cannot be part of a pod.
	// The container must have globally unique name and ID - pod names and
	// IDs also conflict with container names and IDs.
	// The container must be in the set namespace if a namespace has been
	// set.
	// All containers this container depends on must be part of the same
	// namespace and must not be joined to a pod.
	AddContainer(ctr *Container) error
	// Removes container from state.
	// Containers that are part of pods must use RemoveContainerFromPod.
	// The container must be part of the set namespace.
	// All dependencies must be removed first.
	// All exec sessions referencing the container must be removed first.
	RemoveContainer(ctr *Container) error
	// UpdateContainer updates a container's state from the backing store.
	// The container must be part of the set namespace.
	UpdateContainer(ctr *Container) error
	// SaveContainer saves a container's current state to the backing store.
	// The container must be part of the set namespace.
	SaveContainer(ctr *Container) error
	// ContainerInUse checks if other containers depend upon a given
	// container.
	// It returns a slice of the IDs of containers which depend on the given
	// container. If the slice is empty, no container depend on the given
	// container.
	// A container cannot be removed if other containers depend on it.
	// The container being checked must be part of the set namespace.
	ContainerInUse(ctr *Container) ([]string, error)
	// Retrieves all containers presently in state.
	// If a namespace is set, only containers within the namespace will be
	// returned.
	AllContainers() ([]*Container, error)

	// Return a container config from the database by full ID
	GetContainerConfig(id string) (*ContainerConfig, error)

	// Add creates a reference to an exec session in the database.
	// The container the exec session is attached to will be recorded.
	// The container state will not be modified.
	// The actual exec session itself is part of the container's state.
	// We assume higher-level callers will add the session by saving the
	// container's state before calling this. This only ensures that the ID
	// of the exec session is associated with the ID of the container.
	// Implementations may, but are not required to, verify that the state
	// of the given container has an exec session with the ID given.
	AddExecSession(ctr *Container, session *ExecSession) error
	// Get retrieves the container a given exec session is attached to.
	GetExecSession(id string) (string, error)
	// Remove a reference to an exec session from the database.
	// This will not modify container state to remove the exec session there
	// and instead only removes the session ID -> container ID reference
	// added by AddExecSession.
	RemoveExecSession(session *ExecSession) error
	// Get the IDs of all exec sessions attached to a given container.
	GetContainerExecSessions(ctr *Container) ([]string, error)
	// Remove all exec sessions for a single container.
	// Usually used as part of removing the container.
	// As with RemoveExecSession, container state will not be modified.
	RemoveContainerExecSessions(ctr *Container) error

	// PLEASE READ FULL DESCRIPTION BEFORE USING.
	// Rewrite a container's configuration.
	// This function breaks libpod's normal prohibition on a read-only
	// configuration, and as such should be used EXTREMELY SPARINGLY and
	// only in very specific circumstances.
	// Specifically, it is ONLY safe to use thing function to make changes
	// that result in a functionally identical configuration (migrating to
	// newer, but identical, configuration fields), or during libpod init
	// WHILE HOLDING THE ALIVE LOCK (to prevent other libpod instances from
	// being initialized).
	// Most things in config can be changed by this, but container ID and
	// name ABSOLUTELY CANNOT BE ALTERED. If you do so, there is a high
	// potential for database corruption.
	// There are a lot of capital letters and conditions here, but the short
	// answer is this: use this only very sparingly, and only if you really
	// know what you're doing.
	RewriteContainerConfig(ctr *Container, newCfg *ContainerConfig) error
	// PLEASE READ THE DESCRIPTION FOR RewriteContainerConfig BEFORE USING.
	// This function is identical to RewriteContainerConfig, save for the
	// fact that it is used with pods instead.
	// It is subject to the same conditions as RewriteContainerConfig.
	// Please do not use this unless you know what you're doing.
	RewritePodConfig(pod *Pod, newCfg *PodConfig) error
	// PLEASE READ THE DESCRIPTION FOR RewriteContainerConfig BEFORE USING.
	// This function is identical to RewriteContainerConfig, save for the
	// fact that it is used with volumes instead.
	// It is subject to the same conditions as RewriteContainerConfig.
	// The exception is that volumes do not have IDs, so only volume name
	// cannot be altered.
	// Please do not use this unless you know what you're doing.
	RewriteVolumeConfig(volume *Volume, newCfg *VolumeConfig) error

	// Accepts full ID of pod.
	// If the pod given is not in the set namespace, an error will be
	// returned.
	Pod(id string) (*Pod, error)
	// Accepts full or partial IDs (as long as they are unique) and names.
	// Pods not in the set namespace are ignored.
	LookupPod(idOrName string) (*Pod, error)
	// Checks if a pod with the given ID is present in the state.
	// If the given pod is not in the set namespace, false is returned.
	HasPod(id string) (bool, error)
	// Check if a pod has a container with the given ID.
	// The pod must be part of the set namespace.
	PodHasContainer(pod *Pod, ctrID string) (bool, error)
	// Get the IDs of all containers in a pod.
	// The pod must be part of the set namespace.
	PodContainersByID(pod *Pod) ([]string, error)
	// Get all the containers in a pod.
	// The pod must be part of the set namespace.
	PodContainers(pod *Pod) ([]*Container, error)
	// Adds pod to state.
	// The pod must be part of the set namespace.
	// The pod's name and ID must be globally unique.
	AddPod(pod *Pod) error
	// Removes pod from state.
	// Only empty pods can be removed from the state.
	// The pod must be part of the set namespace.
	RemovePod(pod *Pod) error
	// Remove all containers from a pod.
	// Used to simultaneously remove containers that might otherwise have
	// dependency issues.
	// Will fail if a dependency outside the pod is encountered.
	// The pod must be part of the set namespace.
	RemovePodContainers(pod *Pod) error
	// AddContainerToPod adds a container to an existing pod.
	// The container given will be added to the state and the pod.
	// The container and its dependencies must be part of the given pod,
	// and the given pod's namespace.
	// The pod must be part of the set namespace.
	// The pod must already exist in the state.
	// The container's name and ID must be globally unique.
	AddContainerToPod(pod *Pod, ctr *Container) error
	// RemoveContainerFromPod removes a container from an existing pod.
	// The container will also be removed from the state.
	// The container must be in the given pod, and the pod must be in the
	// set namespace.
	RemoveContainerFromPod(pod *Pod, ctr *Container) error
	// UpdatePod updates a pod's state from the database.
	// The pod must be in the set namespace.
	UpdatePod(pod *Pod) error
	// SavePod saves a pod's state to the database.
	// The pod must be in the set namespace.
	SavePod(pod *Pod) error
	// Retrieves all pods presently in state.
	// If a namespace has been set, only pods in that namespace will be
	// returned.
	AllPods() ([]*Pod, error)

	// Volume accepts full name of volume
	// If the volume doesn't exist, an error will be returned
	Volume(volName string) (*Volume, error)
	// LookupVolume accepts an unambiguous partial name or full name of a
	// volume. Ambiguous names will result in an error.
	LookupVolume(name string) (*Volume, error)
	// HasVolume returns true if volName exists in the state,
	// otherwise it returns false
	HasVolume(volName string) (bool, error)
	// VolumeInUse goes through the container dependencies of a volume
	// and checks if the volume is being used by any container. If it is
	// a slice of container IDs using the volume is returned
	VolumeInUse(volume *Volume) ([]string, error)
	// AddVolume adds the specified volume to state. The volume's name
	// must be unique within the list of existing volumes
	AddVolume(volume *Volume) error
	// RemoveVolume removes the specified volume.
	// Only volumes that have no container dependencies can be removed
	RemoveVolume(volume *Volume) error
	// UpdateVolume updates the volume's state from the database.
	UpdateVolume(volume *Volume) error
	// SaveVolume saves a volume's state to the database.
	SaveVolume(volume *Volume) error
	// AllVolumes returns all the volumes available in the state
	AllVolumes() ([]*Volume, error)
}
State is a storage backend for libpod's current state. A State is only initialized once per instance of libpod. As such, initialization methods for State implementations may safely assume they will be run as a singleton. For all container and pod retrieval methods, a State must retrieve the Configuration struct of the container or pod and include it in the returned struct. The State of the container or pod may optionally be included as well, but this is not a requirement. As such, all containers and pods must be synced with the database via the UpdateContainer and UpdatePod calls before any state-specific information is retrieved after they are pulled from the database. Generally speaking, the syncContainer() call should be run at the beginning of all API operations, which will silently handle this.

func NewBoltState ¶
func NewBoltState(path string, runtime *Runtime) (State, error)
NewBoltState creates a new bolt-backed state database

func NewInMemoryState ¶
func NewInMemoryState() (State, error)
NewInMemoryState initializes a new, empty in-memory state

type StorageContainer ¶
type StorageContainer struct {
	ID              string
	Names           []string
	Image           string
	CreateTime      time.Time
	PresentInLibpod bool
}
StorageContainer represents a container present in c/storage but not in libpod.

type Volume ¶
type Volume struct {
	// contains filtered or unexported fields
}
Volume is a libpod named volume. Named volumes may be shared by multiple containers, and may be created using more complex options than normal bind mounts. They may be backed by a mounted filesystem on the host.

func (*Volume) Anonymous ¶
func (v *Volume) Anonymous() bool
Anonymous returns whether this volume is anonymous. Anonymous volumes were created with a container, and will be removed when that container is removed.

func (*Volume) Config ¶
func (v *Volume) Config() (*VolumeConfig, error)
Config returns the volume's configuration.

func (*Volume) CreatedTime ¶
func (v *Volume) CreatedTime() time.Time
CreatedTime returns the time the volume was created at. It was not tracked for some time, so older volumes may not contain one.

func (*Volume) Driver ¶
func (v *Volume) Driver() string
Driver retrieves the volume's driver.

func (*Volume) GID ¶
func (v *Volume) GID() (int, error)
GID returns the GID the volume will be created as.

func (*Volume) Inspect ¶
func (v *Volume) Inspect() (*InspectVolumeData, error)
Inspect provides detailed information about the configuration of the given volume.

func (*Volume) Labels ¶
func (v *Volume) Labels() map[string]string
Labels returns the volume's labels

func (*Volume) MountPoint ¶
func (v *Volume) MountPoint() string
MountPoint returns the volume's mountpoint on the host

func (*Volume) Name ¶
func (v *Volume) Name() string
Name retrieves the volume's name

func (*Volume) Options ¶
func (v *Volume) Options() map[string]string
Options return the volume's options

func (*Volume) Scope ¶
func (v *Volume) Scope() string
Scope retrieves the volume's scope. Libpod does not implement volume scoping, and this is provided solely for Docker compatibility. It returns only "local".

func (*Volume) UID ¶
func (v *Volume) UID() (int, error)
UID returns the UID the volume will be created as.

func (*Volume) VolumesInUse ¶
func (v *Volume) VolumesInUse() ([]string, error)
VolumeInUse goes through the container dependencies of a volume and checks if the volume is being used by any container.

type VolumeConfig ¶
type VolumeConfig struct {
	// Name of the volume.
	Name string `json:"name"`
	// ID of the volume's lock.
	LockID uint32 `json:"lockID"`
	// Labels for the volume.
	Labels map[string]string `json:"labels"`
	// The volume driver. Empty string or local does not activate a volume
	// driver, all other volumes will.
	Driver string `json:"volumeDriver"`
	// The location the volume is mounted at.
	MountPoint string `json:"mountPoint"`
	// Time the volume was created.
	CreatedTime time.Time `json:"createdAt,omitempty"`
	// Options to pass to the volume driver. For the local driver, this is
	// a list of mount options. For other drivers, they are passed to the
	// volume driver handling the volume.
	Options map[string]string `json:"volumeOptions,omitempty"`
	// Whether this volume is anonymous (will be removed on container exit)
	IsAnon bool `json:"isAnon"`
	// UID the volume will be created as.
	UID int `json:"uid"`
	// GID the volume will be created as.
	GID int `json:"gid"`
}
VolumeConfig holds the volume's immutable configuration.

type VolumeCreateOption ¶
type VolumeCreateOption func(*Volume) error
A VolumeCreateOption is a functional option which alters the Volume created by NewVolume

func WithVolumeDriver ¶
func WithVolumeDriver(driver string) VolumeCreateOption
WithVolumeDriver sets the volume's driver. It is presently not implemented, but will be supported in a future Podman release.

func WithVolumeGID ¶
func WithVolumeGID(gid int) VolumeCreateOption
WithVolumeGID sets the GID that the volume will be created as.

func WithVolumeLabels ¶
func WithVolumeLabels(labels map[string]string) VolumeCreateOption
WithVolumeLabels sets the labels of the volume.

func WithVolumeName ¶
func WithVolumeName(name string) VolumeCreateOption
WithVolumeName sets the name of the volume.

func WithVolumeNeedsChown ¶
func WithVolumeNeedsChown() VolumeCreateOption
WithVolumeNeedsChown sets the NeedsChown flag for the volume.

func WithVolumeOptions ¶
func WithVolumeOptions(options map[string]string) VolumeCreateOption
WithVolumeOptions sets the options of the volume. If the "local" driver has been selected, options will be validated. There are currently 3 valid options for the "local" driver - o, type, and device.

func WithVolumeUID ¶
func WithVolumeUID(uid int) VolumeCreateOption
WithVolumeUID sets the UID that the volume will be created as.

type VolumeFilter ¶
type VolumeFilter func(*Volume) bool
VolumeFilter is a function to determine whether a volume is included in command output. Volumes to be outputted are tested using the function. a true return will include the volume, a false return will exclude it.

type VolumeState ¶
type VolumeState struct {
	// MountCount is the number of times this volume has been requested to
	// be mounted.
	// It is incremented on mount() and decremented on unmount().
	// On incrementing from 0, the volume will be mounted on the host.
	// On decrementing to 0, the volume will be unmounted on the host.
	MountCount uint `json:"mountCount"`
	// NeedsCopyUp indicates that the next time the volume is mounted into
	// a container, the container will "copy up" the contents of the
	// mountpoint into the volume.
	// This should only be done once. As such, this is set at container
	// create time, then cleared after the copy up is done and never set
	// again.
	NeedsCopyUp bool `json:"notYetMounted,omitempty"`
	// NeedsChown indicates that the next time the volume is mounted into
	// a container, the container will chown the volume to the container process
	// UID/GID.
	NeedsChown bool `json:"notYetChowned,omitempty"`
	// UIDChowned is the UID the volume was chowned to.
	UIDChowned int `json:"uidChowned,omitempty"`
	// GIDChowned is the GID the volume was chowned to.
	GIDChowned int `json:"gidChowned,omitempty"`
}
VolumeState holds the volume's mutable state. Volumes are not guaranteed to have a state. Only volumes using the Local driver that have mount options set will create a state.