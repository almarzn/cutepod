apiVersion: cutepod.io/v1
kind: CuteContainer
metadata:
  name: {{ .Values.api.name }}
  labels:
    app: {{ .Values.app.name }}
    component: api
    tier: backend
    version: {{ .Values.app.version }}
spec:
  image: {{ .Values.api.image }}
  command: ["node"]
  args: ["-e", "const fs = require('fs'); const http = require('http'); console.log('Starting API server...'); let secrets = {}; try { const secretData = fs.readFileSync('/run/secrets/env', 'utf8'); const lines = secretData.split('\\n'); for (const line of lines) { if (line.trim() && line.includes('=')) { const [key, value] = line.split('=', 2); secrets[key] = value; } } console.log('Secrets loaded from file:', Object.keys(secrets)); } catch (err) { console.error('Failed to load secrets:', err.message); } console.log('Environment variables loaded:'); console.log('- NODE_ENV:', process.env.NODE_ENV); console.log('- database-url:', secrets['database-url'] ? 'configured' : 'not configured'); console.log('- redis-url:', secrets['redis-url'] ? 'configured' : 'not configured'); console.log('- jwt-secret:', secrets['jwt-secret'] ? 'configured' : 'not configured'); console.log('- api-key:', secrets['api-key'] ? 'configured' : 'not configured'); const server = http.createServer(function(req, res) { if (req.url === '/health') { res.writeHead(200, { 'Content-Type': 'application/json' }); res.end(JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() })); return; } const response = { message: 'Hello from {{ .Values.app.name }} API!', timestamp: new Date().toISOString(), version: '{{ .Values.app.version }}', environment: process.env.NODE_ENV || 'development', database: secrets['database-url'] ? 'connected' : 'not configured', cache: secrets['redis-url'] ? 'connected' : 'not configured', secrets: { jwt_secret: secrets['jwt-secret'] ? 'configured' : 'not configured', api_key: secrets['api-key'] ? 'configured' : 'not configured' } }; res.writeHead(200, { 'Content-Type': 'application/json' }); res.end(JSON.stringify(response, null, 2)); }); server.listen({{ .Values.api.port }}, '0.0.0.0', function() { console.log('API server running on port {{ .Values.api.port }}'); });"]
  env:
    - name: NODE_ENV
      value: production
    - name: PORT
      value: "{{ .Values.api.port }}"
  ports:
    - containerPort: {{ .Values.api.port }}
      hostPort: 3000
      protocol: TCP
  volumes:
    - name: {{ .Values.volumes.logs.name }}
      mountPath: /var/log/app
      subPath: api
      readOnly: false
      mountOptions:
        seLinuxLabel: z  # Shared access for logs
    - name: {{ .Values.volumes.config.name }}
      mountPath: /app/config
      subPath: api
      readOnly: true
      mountOptions:
        seLinuxLabel: z  # Shared read-only config
  networks:
    - {{ .Values.network.name }}
  secrets:
    - name: {{ .Values.secrets.api.name }}
      env: true
  restartPolicy: always
  healthCheck:
    test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:{{ .Values.api.port }}/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    startPeriod: 45s
  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 250m
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
  dependsOn:
    - {{ .Values.database.name }}
    - {{ .Values.cache.name }}